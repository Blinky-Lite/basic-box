[{"id":"fb032bb0.bba878","type":"tab","label":"Home","disabled":false,"info":""},{"id":"e8763d21.b7461","type":"subflow","name":"HTML","info":"","category":"","in":[{"x":40,"y":40,"wires":[{"id":"91e3585b.224158"}]}],"out":[],"env":[]},{"id":"6ad7c930.1a06b8","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}}},"site":{"name":"Oscillation Overthruster Display","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"43ac8ec.9bf207","type":"template","z":"e8763d21.b7461","name":"HTML","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>","output":"str","x":790,"y":40,"wires":[["233dd1ed.d17ede"]]},{"id":"99432fa.98673d","type":"template","z":"e8763d21.b7461","name":"Foot","field":"payload.foot","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Foot -->\n    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <hr>\n    <div width=\"100%\" style='padding-top:10px;padding-bottom:10px'>\n        <table width='100%'>\n            <tr valign=\"middle\">\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"/readmore\" ><img src=\"/img/glasses.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Read More\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"/tutorial\" ><img src=\"/img/book.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Tutorial\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"/\" ><img src=\"/img/home.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"home\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"https://twitter.com/BlinkyLite\" target=\"_blank\"><img src=\"/img/twitter.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Twitter\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"https://github.com/Blinky-Lite\" target=\"_blank\"><img src=\"/img/github.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Github\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"mailto:info@blinky-lite.io\"><img src=\"/img/mail.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Contact\" /></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <hr>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" ></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\" ></script>\n","output":"str","x":670,"y":40,"wires":[["43ac8ec.9bf207"]]},{"id":"4ac3208f.90f57","type":"template","z":"e8763d21.b7461","name":"Head","field":"payload.head","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Head -->\n    <meta charset=\"UTF-8\"/>\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.2.0/css/all.css\" >\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n    <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js\"></script> \n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-122300334-1\"></script>\n    <script>\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n    \n      gtag('config', 'UA-122300334-1');\n    </script>\n    <!-- Custom CSS -->\n    <style>\n{{{payload.css}}}\n{{{payload.custom.css}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>","output":"str","x":550,"y":40,"wires":[["99432fa.98673d"]]},{"id":"9f84c5ba.086818","type":"template","z":"e8763d21.b7461","name":"navBar","field":"payload.navBar","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- navBar -->\n    <div width=\"100%\" style='padding-top:10px;padding-bottom:10px'>\n        <table width='100%'>\n            <tr valign=\"middle\">\n                <td valign=\"middle\" width=\"14.3%\" align='left'>\n                    <img src=\"/img/BlinkyLogo.gif\" height=\"50px\" />\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"/readmore\" ><img src=\"/img/glasses.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Read More\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"/tutorial\" ><img src=\"/img/book.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Tutorial\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"/\" ><img src=\"/img/home.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"home\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"https://twitter.com/BlinkyLite\" target=\"_blank\"><img src=\"/img/twitter.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Twitter\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"https://github.com/Blinky-Lite\" target=\"_blank\"><img src=\"/img/github.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Github\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"mailto:info@blinky-lite.io\"><img src=\"/img/mail.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Contact\" /></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"jumbotron\" width=\"100%\">\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"text-align: center\">\n                <h1 class=\"jumbotron-title\">{{{payload.appicon}}}{{{payload.title}}}</h1>\n            </div>\n        </div>\n{{{payload.jumbotronExtras}}}\n    </div>","output":"str","x":420,"y":40,"wires":[["4ac3208f.90f57"]]},{"id":"233dd1ed.d17ede","type":"http response","z":"e8763d21.b7461","name":"","statusCode":"","headers":{},"x":910,"y":40,"wires":[]},{"id":"91e3585b.224158","type":"template","z":"e8763d21.b7461","name":"CSS","field":"payload.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #7395ae;\n          --background-text: #f6d7a2;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #ffffff;\n          --background-text: #7395ae;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n        ul {\n            list-style-type: disk;\n        }\n        li {\n            vertical-align:middle;\n        }\n        code {\n            display:block;\n            padding-top:5px;\n            padding-bottom:5px;\n            background-color: var(--sub-container-text-color);\n            color: var(--sub-container-title-color);\n        }\n        body {\n          background-color: var(--background-color);\n          padding-left:25px;\n          padding-right:25px;\n        }\n        .link-text {\n          color: var(--background-text);\n          text-decoration: underline;\n          font-weight: bold;\n\n        }\n        :hover.link-hover {\n          color: var(--container-title-color);\n          text-decoration: underline;\n        }\n       .link-icon {\n          padding: 1px;\n          color: var(--container-background-color);\n        }\n       .link-icon-hover {\n          padding: 1px;\n          color: var(--background-text);\n        }\n        \n        img {\n          object-fit: contain;\n        }\n        .col {\n          padding-bottom: 20px;\n        }\n        .jumbotron {\n          background-color: var(--container-background-color) !important;\n          color:var(--container-text-color);\n          padding-bottom: 10px;\n          padding-top: 10px;\n        }\n        .jumbotron-link\n        {\n            color: var(--container-title-color);\n        }\n        :hover.jumbotron-link-hover\n        {\n            color: var(--background-text);\n        }    \n        .jumbotron-title\n        {\n          color:var(--container-title-color);\n        }\n        .jumbotron-button\n        {\n          color: var(--container-background-color);\n          background-color: var(--container-title-color);\n        }\n        .lead\n        {\n          color: var(--background-text);\n       }\n        .featurette-heading\n        {\n          color:var(--container-background-color);\n        }\n        .featurette-heading-link\n        {\n          color: var(--container-title-color);\n        }\n        .card\n        {\n          background-color: var(--container-background-color);\n          text-align: center;\n          padding: 10px;\n        }\n        .card-body\n        {\n          color: var(--sub-container-text-color);\n          background-color: var(--sub-container-background-color);\n        }\n        .card-button\n        {\n          color: var(--container-title-color);\n          font-weight: bold;\n          background-color: var(--container-background-color);\n        }\n        .card-title\n        {\n          color: var(--container-title-color);\n          font-weight: bold;\n        }\n        .card-major-bullet\n        {\n          text-align: left;\n        }\n        .card-minor-bullet\n        {\n          text-align: left;\n        }\n        .card-minor-minor-bullet {\n        \tfont-size:  small;\n          font-style:italic;\n        }\n         .card-text\n        {\n          text-align: left;\n        }\n         .card-text-link\n        {\n            color: var(--container-background-color);\n            text-decoration: underline;\n        }\n         .card-link\n        {\n            color: var(--sub-container-background-color);\n            text-decoration: underline;\n        }\n        .scrolling-wrapper {\n          width: 100%;\n          display: inline-block;\n          overflow-x: scroll;\n          overflow-y: hidden;\n          white-space: nowrap;\n        }\n        .footer {\n        /*   position: fixed; */\n           left: 0;\n           bottom: 0;\n           width: 100%;\n           color:var(--container-background-color);\n           background-color: var(--background-color);\n           text-align: center;\n        }\n        .img-max {\n          width: 99%;\n        }\n        .bot-pad\n        {\n          padding-bottom: 20px;\n        }\n        .span-left-justify\n        {\n          float:left;\n        }\n        .right-justify\n        {\n          text-align: right;\n        }\n        .left-justify\n        {\n          text-align: left;\n        }\n        .center-justify\n        {\n          text-align: center;\n        }\n        .radio-button-border\n        {\n          border-style: solid;\n          border-color: var(--container-title-color);\n          border-width: 2px;\n        }\n        .tableHeading\n        {\n          color:var(--background-text);\n          font-weight: 900;\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-weight: 900;\n        }\n        .custom-select\n        {\n          color: var(--container-text-color);\n          background-color: var(--background-color);\n        \n        }\n        .plain-text\n        {\n            color: var(--sub-container-text-color);\n            font-size:medium;\n        }\n","output":"str","x":130,"y":40,"wires":[["47ebd6c.9f66a28"]]},{"id":"47ebd6c.9f66a28","type":"template","z":"e8763d21.b7461","name":"Utility Scripts","field":"payload.utilityScripts","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Utility Scripts\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }","output":"str","x":270,"y":40,"wires":[["9f84c5ba.086818"]]},{"id":"6b8363f5.51e7ac","type":"http in","z":"fb032bb0.bba878","name":"Index","url":"/","method":"get","upload":false,"swaggerDoc":"","x":90,"y":60,"wires":[["6f2cf928.181b38"]]},{"id":"801e769c.71adc8","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-12\">\n                <h2 class=\"featurette-heading\">Control platform for Internet of Things (IoT) systems</h2>\n                <p class=\"lead\">Blinky-Lite is a customizable, web-based, full stack control platform for Internet of Things (IoT) systems</p>\n                <p class=\"lead\">It was designed to be easy to implement for non-experts who have beginner knowledge in</p>\n                <ul>\n                    <li class=\"lead\">Javascript</li>\n                    <li class=\"lead\">the Arduino programming environment (IDE)</li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <table>\n                <tr>\n                    <td width='10%' valign='middle'></td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/greenDemoCircuit.jpg' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/greenDemoCircuit.jpg\" >\n                        </a>\n                    </td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/demoDmaUi.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/demoDmaUi.png\">\n                        </a>\n                    </td>\n                    <td width='10%' valign='middle'></td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n    </div>\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-12\">\n                <h2 class=\"featurette-heading\">Flexible and powerful enough to control anything</h2>\n                <p class=\"lead\">Although Blinky-Lite was designed to be easy, it is flexible and powerful enough to control anything</p>\n                <ul>\n                    <li class=\"lead\">from a blinking LED</li>\n                    <li class=\"lead\">to a particle accelerator</li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <table>\n                <tr>\n                    <td width='10%' valign='middle'></td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/archiveDemo.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/archiveDemo.png\" >\n                        </a>\n                    </td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/cdCircuit.jpg' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/cdCircuit.jpg\" >\n                        </a>\n                    </td>\n                    <td width='10%' valign='middle'></td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n    </div>\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-12\">\n                <h2 class=\"featurette-heading\">Blinky-Lite is:</h2>\n                <ul>\n                    <li class=\"lead\">built with open source code and hardware</li>\n                    <li class=\"lead\">open-source</li>\n                    <li class=\"lead\"><a class='link-text link-hover' target='_blank' href='https://github.com/Blinky-Lite'>https://github.com/Blinky-Lite</a></li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <table>\n                <tr>\n                    <td width='10%' valign='middle'></td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/demoDmaScreenShot.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/demoDmaScreenShot.png\" >\n                        </a>\n                   </td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/vectorArchiveDemo.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/vectorArchiveDemo.png\" >\n                        </a>\n                    </td>\n                    <td width='10%' valign='middle'></td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-3\"></div>\n            <div class=\"col-md-6\">\n                <a class='btn card-button btn-block' href='/readmore' >Read More</a>\n            </div>\n            <div class=\"col-md-3\"></div>\n        </div>\n    </div>\n","output":"str","x":910,"y":60,"wires":[["d796befa.0a69f"]]},{"id":"2b799d82.9e8062","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Blinky-Lite","output":"str","x":470,"y":60,"wires":[["d17a86d3.afc008"]]},{"id":"d796befa.0a69f","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1030,"y":60,"wires":[]},{"id":"6f2cf928.181b38","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n","output":"str","x":330,"y":60,"wires":[["2b799d82.9e8062"]]},{"id":"d17a86d3.afc008","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/BlinkyLogoSmall.png\" height=\"70px\" style='padding-right: 20px;'/>","output":"str","x":600,"y":60,"wires":[["8c25b22a.ae2b3"]]},{"id":"d8f942b1.22ee7","type":"http in","z":"fb032bb0.bba878","name":"tutorial","url":"/tutorial","method":"get","upload":false,"swaggerDoc":"","x":90,"y":560,"wires":[["5d4b6124.3f935"]]},{"id":"a6f52546.e6cce8","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md bot-pad\">\n                    <div class=\"card\">\n                        <p class=\"card-title\">Step 1</p>\n                        <img src=\"img/tutorial/RPi-Logo.png\" height=\"180px\">\n                        <p class=\"card-title\">Setting Up a Raspberry-Pi for Blinky-Lite</p>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">The Raspberry Pi computer integral component of the Blinky-Lite. \nIt can be used a device message controller, an MQTT broker, and a Node-RED web application\nThis section will show you how to setup a Raspberry Pi so it can function seamlessly in Blinky-Lite</p>\n                            <a class=\"btn card-button\" href=\"/tutorial/setupRPi\">Read More</a>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md bot-pad\">\n                    <div class=\"card\">\n                        <p class=\"card-title\">Step 2</p>\n                        <img src=\"img/tutorial/blinky-breadboard.png\" height=\"180px\">\n                        <p class=\"card-title\">Constructing a Blinky-Lite Circuit</p>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">This section will show the circuit diagram and parts list needed to build an example Blinky-Lite circuit</p>\n                            <a class=\"btn card-button\" href=\"/tutorial/blinkyCircuit\">Read More</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md bot-pad\">\n                    <div class=\"card\">\n                        <p class=\"card-title\">Step 3</p>\n                        <img src=\"img/tutorial/dmaRedFlowCrop.png\" height=\"180px\">\n                        <p class=\"card-title\">Building a Device Message Adapter (DMA)</p>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">This section will show you how to build a Device Message Adapter (DMA) in Node-Red on a Raspberry-Pi.\nThe DMA is the interface between the MQTT broker and the device you want to control.</p>\n                            <a class=\"btn card-button\" href=\"/tutorial/dma\">Read More</a>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md bot-pad\">\n                    <div class=\"card\">\n                        <p class=\"card-title\">Step 4</p>\n                        <img src=\"img/tutorial/gui.png\" height=\"180px\">\n                        <p class=\"card-title\">Building a User Interface</p>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">This section will show you how to build a User Interface using Node-Red. \nThe user interface communicates between the user and the MQTT broker.</p>\n                            <a class=\"btn card-button\" href=\"/tutorial/gui\">Read More</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n ","output":"str","x":910,"y":560,"wires":[["dead30d5.01811"]]},{"id":"122858d9.35d7a7","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Blinky-Lite Tutorial","output":"str","x":470,"y":560,"wires":[["c19a8085.3786a"]]},{"id":"dead30d5.01811","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1030,"y":560,"wires":[]},{"id":"5d4b6124.3f935","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n","output":"str","x":330,"y":560,"wires":[["122858d9.35d7a7"]]},{"id":"c19a8085.3786a","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/bookYellow.png\" height=\"70px\"  style='padding-right: 20px;'/>","output":"str","x":600,"y":560,"wires":[["585f01b.76936"]]},{"id":"585f01b.76936","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"    <h2 class=\"jumbotron-title\">In this tutorial we will show you how to make a light blink with the full Blinky-Lite stack!</h2>\n    <p class=\"lead\">Althought the goal of the tutorial might sound trivial, once you can make a simple LED blink with with the Blinky-Lite stack, you should be able to extend this knowledge to make anything \"blink\" - \nfrom an LED to a nuclear power plant</p>\n","output":"str","x":760,"y":560,"wires":[["a6f52546.e6cce8"]]},{"id":"9957d7b6.600718","type":"http in","z":"fb032bb0.bba878","name":"tutorial/setupRPi","url":"/tutorial/setupRPi","method":"get","upload":false,"swaggerDoc":"","x":120,"y":620,"wires":[["bf2bdc.d5a5c428"]]},{"id":"e3f3b95b.4bb048","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n<div class=\"container bot-pad\">\n    <div class=\"card\">\n        <h5 class=\"card-title\">\n            <a NAME=\"diskImage\">Setting up the Disk Image </a>\n            <br>\n            <span style=\"font-size: small;\">\n                <a class=\"card-link\" href=\"#contents\">Table of contents</a>\n            </span>\n        </h5>\n        <div class=\"card-body\">\n            <p class=\"card-text\">\n                On Linux desktop computer, download the latest Raspberry Pi image at: <a class=\"card-text-link\" href=\"https://downloads.raspberrypi.org/raspbian_latest\" target=\"_blank\">https://downloads.raspberrypi.org/raspbian_latest</a>\n                <br>\n                The downloaded file will have a name like <b>YYYY-MM-DD-raspbian-stretch.zip</b>\n                <br>\n                Where YYYY-MM-DD is the year, month, and date of the release. Change directory to the location of the downloaded file and unzip it:<br>\n                <code>unzip YYYY-MM-DD-raspbian-stretch.zip</code>\n                <br>\n                Before you insert an SD card into your computer identify the names of the drives on your computer by typing:<br>\n                <code>df -h</code>\n                <br>\n                You will see something similar to the screenshot below:<br>\n                <img class=\"img-max\" src=\"/img/tutorial/screenBeforeSD.png\" width=\"95%\">\n                <br>\n                Now, insert an 8GB (or greater) SD card into your computer. Type:<br>\n                <code>df -h</code>\n                <br>\n                to determine the name of the SD card<br>\n                <img class=\"img-max\" src=\"/img/tutorial/screenAfterSD.png\" width=\"95%\">\n                <br>\n                In this example the name of the SD card is mmcblk0  (p1 is the partition).\nCopy the disk image <b>2018-04-18-raspbian-stretch.img </b>\n                to the SD card<br>\n                <code>\n                    sudo dd if=\n                    <b>\n                        <i>YYYY-MM-DD</i>\n                    </b>\n                    -raspbian-stretch.img of=/dev/\n                    <b>\n                        <i>SD-CARD-NAME </i>\n                    </b>\n                    bs=1M\n                </code>\n                <br>\n                Where in this example \n                <b>\n                    <i>SD-CARD-NAME </i>\n                </b>\n                is mmcblk0. Once the disk copy is complete, eject the disk and re-insert the disk. \nYou should see two partitions show up on your linux desktop. \nThe RaspberryPi image now comes with SSH disabled. \nTo enable it, open the boot partition of the sd card and create a file named ssh. \nFrom a linux terminal on your desktop computer enter:<br>\n                <code>sudo nano /media/$USER/boot/ssh</code>\n                <br>\n                Type a couple of characters and save <i>(cntrl-x). </i>\n                For the <b>Raspberry Pi Zero</b>\n                , there is no ethernet connection so you need to give \nit the information to connect to your wireless network. Edit the <b>wpa_supplicant.conf</b>\n                file  \non the rootfs partition of the sd card. From a linux terminal on your desktop computer enter:<br>\n                <code>sudo nano /media/$USER/rootfs/etc/wpa_supplicant/wpa_supplicant.conf</code>\n                <br>\n                Add the following lines to the file where \n                <b>\n                    <i>country-abbrev</i>\n                </b>\n                is your contry abbreviation (for example in Sweden it is SE), \n                <b>\n                    <i>your-wireless-ssid</i>\n                </b>\n                is your wireless ssid and \n                <b>\n                    <i>your-wireless-ssid-password</i>\n                </b>\n                is your wireless ssid password<br>\n                <code>\n                    country=\n                    <b>\n                        <i>country-abbrev</i>\n                    </b>\n                    <br>\n                    <br>\n                    network={<br>\n                    &nbsp;&nbsp;&nbsp;&nbsp;ssid=\"\n                    <b>\n                        <i>your-wireless-ssid</i>\n                    </b>\n                    \"<br>\n                    &nbsp;&nbsp;&nbsp;&nbsp;psk=\"\n                    <b>\n                        <i>your-wireless-ssid-password</i>\n                    </b>\n                    \"<br>\n                    &nbsp;&nbsp;&nbsp;&nbsp;key_mgmt=WPA-PSK<br>}\n                </code>\n                <br>\n                and save <i>(cntrl-x).</i>\n            </p>\n        </div>\n    </div>\n</div>\n<div class=\"container bot-pad\">\n    <div class=\"card\">\n        <h5 class=\"card-title\">\n            <a NAME=\"connecting\">Connecting to the Raspberry-Pi </a>\n            <br>\n            <span style=\"font-size: small;\">\n                <a class=\"card-link\" href=\"#contents\">Table of contents</a>\n            </span>\n        </h5>\n        <div class=\"card-body\">\n            <p class=\"card-text\">\n                Eject the sd card and place it into the Raspberry-Pi. \nConnect the Raspberry Pi with an ethernet cable to your router and then power up the raspberry pi. \nOpen a linux terminal and ssh into the RaspberryPi:<br>\n                <code>ssh pi@raspberrypi.local</code>\n                <br>\n                The default password for the Raspberry-Pi is \n                <b>\n                    <i>raspberry  </i>\n                </b>\n                . We will want to change this immediately. \nNow configure the Raspberry-Pi by running the configuration program:<br>\n                <code>sudo raspi-config</code>\n                <br>\n                The <b>raspi-config </b>\n                program looks as below:<br>\n                <img class=\"img-max\" src=\"/img/tutorial/raspi_config.png\" width=\"95%\">\n                <br>\n            </p>\n            <ul class=\"card-text\">\n                <li>First change the password - Menu Iterm 1</li>\n                <li>Under Menu Item 2, change the hostname. Do not set up the wifi, we will do that later</li>\n                <li>Under Item 5, Enable both SSH (P2) and VNC (P3). We will need VNC later</li>\n                <li>\n                    Under Item 7, set the screen resolution (for the VNC server)  - Choice A5. I prefer\n                    <b>\n                        <i>DMT Mode 35 1280x1024 60Hz 5:4</i>\n                    </b>\n                </li>\n                <li>Under Item 7, Expand the file system - Choice A1</li>\n                <li>\n                    Under Item 5, Serial Port (P6) select <b>No </b>\n                    for <i>Would you like a login shell to be accessible over serial?</i>\n                    Select <b>Yes </b>\n                    for <i>Would you like the serial port hardware to be enabled?</i>\n                </li>\n            </ul>\n            <p class=\"card-text\">\n                You should get an screen lookin as the following:<br>\n                <img class=\"img-max\" src=\"/img/tutorial/raspi-config-serial.png\" width=\"95%\">\n                <br>\n                Using the arrow keys navigate to <b>Finish </b>\n                to exit the configuration program and reboot the RaspberryPi\n            </p>\n            <p class=\"card-text\">\n                On your linux Desktop, download the RealVNC Viewer at <a class=\"card-text-link\" href=\"https://www.realvnc.com/en/connect/download/viewer/linux/\" target=\"_blank\">https://www.realvnc.com/en/connect/download/viewer/linux/</a>\n                <br>We will now connect to the RaspberryPi desktop. \nIt is easy to finish the rest of the configuration from the RaspberryPi Desktop \nand the VNC Viewer will allow you to run programs such as the Arduino \nprograming environment on the RaspberryPi.\n            </p>\n            <ul class=\"card-text\">\n                <li>\n                    Open the VNC viewer and make a New Connection under the File menu. Change the VNC server to: \n                    <b>\n                        <i>hostname.local:5900 </i>\n                    </b>\n                    where hostname is what you entered in Item 2 of the raspi-config program. \n                </li>\n                <li>Close the new connection dialog and double click on your new connection in the VNC Viewer window. </li>\n                <li>The VNC viewer should connect to the RaspberryPi. At first it will warn you of an identity check. Just click continue. </li>\n                <li>Next you will be asked for a username and password. The username is pi. The password is the password you entered in Item 2 of the raspi-config program.</li>\n            </ul>\n            <p class=\"card-text\">\n                You should see a window as below:<img class=\"img-max\" src=\"/img/tutorial/raspiDesktop.png\" width=\"95%\">\n            </p>\n            <p class=\"card-text\">\n                The wireless connection can be setup by clicking on the Up-Down arrow icon in the upper righthand corner of the desktop. \nA nice GUI version of the configuration program can be found under the Preferences sub-menu of Raspberry menu.<br>\n                <img class=\"img-max\" src=\"/img/tutorial/raspiDesktopConfig.png\">\n            </p>\n            <p class=\"card-text\">Open the GUI raspi-config program and under the Localisation tab, set the Locale, Timezone, and Keyboard. \nThe RaspberryPi will have to be booted for these changes to take effect.</p>\n        </div>\n    </div>\n</div>\n<div class=\"container bot-pad\">\n    <div class=\"card\">\n        <h5 class=\"card-title\">\n            <a NAME=\"node\">Setting up node.js, npm, and screen </a>\n            <br>\n            <span style=\"font-size: small;\">\n                <a class=\"card-link\" href=\"#contents\">Table of contents</a>\n            </span>\n        </h5>\n        <div class=\"card-body\">\n            <p class=\"card-text\">\n                The RaspberryPi comes with very old versions of node.js and npm installed. \nIn this section we will update node.js and npm. \nThe linux application screen  will be used starting the device message adapter on boot. \nFrom your linux desktop, ssh into the RaspberryPi<br>\n                <code>ssh pi@hostname.local</code>\n                <br>\n                Where \n                <b>\n                    <i>hostname </i>\n                </b>\n                is what you entered in Item 2 of the raspi-config program. Check the version of node:<br>\n                <code>node -v</code>\n                <br>\n                As of 2018-04-18 release, the RaspberryPi ships with node.js at v4.8.2. \nTo upgrade, check the hardware on your RaspberryPi.<br>\n                <code>uname -a</code>\n                <br>\n                A <b>RaspberryPi 3 </b>\n                runs an ARM7 processor while a <b>RaspberryPi </b>\n                Zero runs  an ARM6 processor. For easier cleanup later, on the ssh session you are \nrunning to connect to the RaspberryPi, change the directory to the Download directory:<br>\n                <code>cd ~/Downloads</code>\n                <br>\n                In a browser go to the nodejs download page at: <a class=\"card-text-link\" href=\"https://nodejs.org/en/download/\" target=\"_blank\">https://nodejs.org/en/download/</a>\n                The Node.js download page will look as below:<br>\n                <img class=\"img-max\" src=\"/img/tutorial/nodejsDownload.png\" width=\"95%\">\n            </p>\n            <p class=\"card-text\">\n                Find the linux binary  distribution that matches your RaspberryPi hardware (most likely ARMv7). \nCopy the link location and in the ssh terminal type:<br>\n                <code>wget https://nodejs.org/dist/vX.YY.Z/node-vX.YY.Z-linux-armv7l.tar.xz</code>\n                <br>\n                Where \n                <b>\n                    <i>vX.YY.Z </i>\n                </b>\n                is current release of node.js. Then, unzip the file:<br>\n                <code>\n                    tar -xf node-\n                    <b>\n                        <i>vX.YY.Z</i>\n                    </b>\n                    -linux-armv7l.tar.xz\n                </code>\n                <br>\n                Navigate into the unzipped directory:<br>\n                <code>\n                    cd node-\n                    <b>\n                        <i>vX.YY.Z</i>\n                    </b>\n                    -linux-armv7l\n                </code>\n                <br>\n                And copy the files to the \n                <b>\n                    <i>/usr/ </i>\n                </b>\n                directory by:<br>\n                <code>sudo cp -R * /usr/</code>\n                <br>\n                Now check the version of node.js by:<br>\n                <code>node -v</code>\n                <br>\n                and:<br>\n                <code>npm -v</code>\n                <br>\n                You should see a node version that matches \n                <b>\n                    <i>vX.YY.Z </i>\n                </b>\n                and an npm version greater than 5.5.\nYou can now delete all the items in the RaspberryPi download directory:<br>\n                <code>rm -rf ~/Downloads/*</code>\n                <br>\n                To install <b>screen </b>\n                enter:<br>\n                <code>sudo apt-get install screen</code>\n                <br>\n            </p>\n        </div>\n    </div>\n</div>\n<div class=\"container bot-pad\">\n    <div class=\"card\">\n        <h5 class=\"card-title\">\n            <a NAME=\"mqtt\">Installing an MQTT Broker</a>\n            <br>\n            <span style=\"font-size: small;\">\n                <a class=\"card-link\" href=\"#contents\">Table of contents</a>\n            </span>\n        </h5>\n        <div class=\"card-body\">\n            <p class=\"card-text\">\n                <i>Note: Only the Blinky-Lite Core Raspberry Pi needs to have a MQQT broker installed. Blinky-Lite device message adapters do not require a MQTT broker.</i>\n            </p>\n            <p class=\"card-text\">\n                Their are many open source MQTT brokers <a class=\"card-text-link\" href=\"https://diyprojects.io/mqtt-mosquitto-communicating-connected-objects-iot/\" target=\"_blank\">available </a>\n                but Blinky-Lite will use Mosquitto supported by the <a class=\"card-text-link\" href=\"http://iot.eclipse.org/\" target=\"_blank\">Eclipse Foundation. </a>\n                Open a terminal session into your Raspberry-Pi either through an ssh session from your \nLinux desktop RealVNC  Connection. Once you have a terminal session running on your \nRaspberry-Pi, install Mosquitto by typing:<br>\n                <code>sudo apt-get install mosquitto</code>\n                <br>\n                To run tests on your Raspberry, using  mosquitto_sub clients (to subscribe), \nmosquitto_pub (to post messages) and mosquitto_passwd (to set up users and passwords) enter:<br>\n                <code>sudo apt-get install mosquitto-clients</code>\n                <br>\n                Then edit the mosquitto configuration file<br>\n                <code>sudo nano /etc/mosquitto/mosquitto.conf</code>\n                <br>\n                by addingto the bottom of the file:<br>\n                <code>\n                    allow_anonymous false<br>password_file /etc/mosquitto/pwfile\n                </code>\n                <br>\n                and save and exit (<i>Ctrl-x</i>\n                ). Now setup the password for the MQTT broker:<br>\n                <code>\n                    sudo mosquitto_passwd -c /etc/mosquitto/pwfile <i>broker-name</i>\n                </code>\n                <br>\n                I usually choose the hostname of the Raspberry-Pi as the broker name. \nThe program will ask you for the a password for your broker. \nAfter you have chosen the password, reboot your Raspberry-Pi:<br>\n                <code>sudo reboot</code>\n                <br>\n                The Mosquitto MQTT broker should start on boot. When the Raspberry-Pi comes back up, \nlogin and check that the MQTT broker is running by typing at the terminal:<br>\n                <code>ps -aux | grep mosquitto</code>\n                <br>\n                You should see an output looking something like:<br>\n                <code>mosquit+ 302 0.3 1.0 8228 4500 ?     S  07:41 0:00 /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf</code>\n                <br>\n                But the process numbers will be different. Now test the MQTT broker by subscribing to a topic:<br>\n                <code>\n                    mosquitto_sub -h 127.0.0.1  -t chit/chat -u <i>broker-name </i>\n                    -P <i>broker-password</i>\n                </code>\n                <br>where:\n            </p>\n            <ul class=\"card-text\">\n                <li>\n                    <b>-h </b>\n                    is the IP address of the broker (which is 127.0.0.1 right now since we are testing the \nexample locally on the broker). \nNote that if your Raspberry-Pi is behind a firewall and you want to access the broker \nfrom outside the firewall (which you usually do):\n                    <ul>\n                        <li>you will need to setup up port forwarding on your home router. </li>\n                        <li>You will need to consult the manual for your router to do that.</li>\n                        <li>The Port Number for the MQTT broker is the default 1883</li>\n                    </ul>\n                </li>\n                <li>\n                    <b>-t </b>\n                    is the topic you wish to subscribe to (chit/chat in this example)\n                </li>\n                <li>\n                    <b>-u </b>\n                    is the broker name you chose for the MQTT broker previously\n                </li>\n                <li>\n                    <b>-P </b>\n                    is the password of the MQTT broker\n                </li>\n            </ul>\n            <p class=\"card-text\">\n                The program will now wait for messages. In another terminal window, login to the Raspberry-Pi and enter:<br>\n                <code>\n                    mosquitto_pub -h 127.0.0.1 -t chit/chat -m \"Hi There\" -u <i>broker-name </i>\n                    -P <i>broker-password</i>\n                </code>\n                <br>\n                Where -m is the message you would like to send to the broker \n(“Hi There” in this example). You should see in the terminal running mosquitto_sub the message echoed. \nCongratulations! You now have a function MQTT broker. You can exit the mosquitto_sub program by typing <i>ctrl-c</i>\n            </p>\n        </div>\n    </div>\n</div>\n","output":"str","x":910,"y":620,"wires":[["45aae700.e22e68"]]},{"id":"a8fe881c.31d598","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Setting Up a Raspberry-Pi for Blinky-Lite","output":"str","x":470,"y":620,"wires":[["9dd501b1.e40ac"]]},{"id":"45aae700.e22e68","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1030,"y":620,"wires":[]},{"id":"bf2bdc.d5a5c428","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n","output":"str","x":330,"y":620,"wires":[["a8fe881c.31d598"]]},{"id":"9dd501b1.e40ac","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/bookYellow.png\" height=\"70px\"  style='padding-right: 20px;'/>","output":"str","x":600,"y":620,"wires":[["35982752.aeef28"]]},{"id":"35982752.aeef28","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"    <p>The Raspberry Pi computer integral component of the Blinky-Lite. It can be used a device message controller, an MQTT broker, and a Node-RED web application \nThis section will show you how to setup a Raspberry Pi so it can function seamlessly in Blinky-Lite.\n    </p>\n    <h2>\n        <a NAME=\"contents\">Table of Contents</a>\n    </h2>\n    <ul>\n        <li>\n            <a class=\"jumbotron-link\" href=\"#diskImage\">Setting up the Disk Image</a>\n        </li>\n        <li>\n            <a class=\"jumbotron-link\" href=\"#connecting\">Connecting to the Raspberry-Pi</a>\n        </li>\n        <li>\n            <a class=\"jumbotron-link\" href=\"#node\">Setting up node.js and npm</a>\n        </li>\n        <li>\n            <a class=\"jumbotron-link\" href=\"#mqtt\">Installing an MQTT Broker</a>\n        </li>\n    </ul>\n","output":"str","x":760,"y":620,"wires":[["e3f3b95b.4bb048"]]},{"id":"8c25b22a.ae2b3","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"    <h2 style=\"text-align: center; color:--container-title-color;\">Controls for humans</h2>","output":"str","x":760,"y":60,"wires":[["801e769c.71adc8"]]},{"id":"50fbeb43.7d5fc4","type":"http in","z":"fb032bb0.bba878","name":"readmore","url":"/readmore","method":"get","upload":false,"swaggerDoc":"","x":100,"y":120,"wires":[["c46aa9a2.581038"]]},{"id":"ecc79992.f96468","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div class=\"container\">\n        <div class=\"row\">\n            <h2 class=\"featurette-heading\">Architecture</h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <p class='lead'>The Blinky-Lite architecture can be compared with an orchestra concert.</p>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <a href='/img/readMore/architecture.png' target='_blank'>\n                    <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/architecture.png\">\n                </a>\n            </div>\n            <div class=\"col-md-6\">\n                <a href='/img/readMore/orchestra.jpg' target='_blank'>\n                    <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/orchestra.jpg\">\n                </a>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <ul>\n                    <li class='archLayerBulletText'>\n                        The user interface as the audience. \n                        <button class=\"btn btn-link link-text link-hover\" id='userInterfaceButton' type=\"button\" onclick=\"topicClicked('userInterface')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n                        <div id='userInterface'>\n{{{payload.userInterface}}}\n                        </div>\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The control box as the conductor. \n                        <button class=\"btn btn-link link-text link-hover\" id='controlBoxButton' type=\"button\" onclick=\"topicClicked('controlBox')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n                        <div id='controlBox'>\n{{{payload.controlBox}}}\n                        </div>\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The device message adapter as the musician.\n                         <button class=\"btn btn-link link-text link-hover\" id='deviceMessageAdapterButton' type=\"button\" onclick=\"topicClicked('deviceMessageAdapter')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n                        <div id='deviceMessageAdapter'>\n{{{payload.deviceMessageAdapter}}}\n                        </div>\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The device controller as the musician's hand.\n                        <button class=\"btn btn-link link-text link-hover\" id='deviceControllerButton' type=\"button\" onclick=\"topicClicked('deviceController')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n                        <div id='deviceController'>\n{{{payload.deviceController}}}\n                        </div>\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The device as the musical instrument. \n                        <button class=\"btn btn-link link-text link-hover\" id='deviceButton' type=\"button\" onclick=\"topicClicked('device')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n                        <div id='device'>\n{{{payload.device}}}\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n<!-- topics = ['device', 'deviceController', 'deviceMessageAdapter', 'controlBox', 'userInterface'];  -->\n    </div>\n    <hr class=\"featurette-divider\">\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-12\">\n                <h2 class=\"featurette-heading\">Core Software</h2>\n                <a class='btn jumbotron-button' href='/readmore/core' >\n                    More Info\n                </a>\n                <p class=\"lead\">Blinky-Lite comes packaged with seven user-ready web-applications </p>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <div class=\"col-md-6\">\n                <ul>\n                    <li class=\"lead\">Scalar Device Plotter</li>\n                    <li class=\"lead\">Scalar Device Archive Plotter</li>\n                    <li class=\"lead\">Vector Device Plotter</li>\n                    <li class=\"lead\">Vector Device ArchivePlotter</li>\n                </ul>\n            </div>\n            <div class=\"col-md-6\">\n                <ul>\n                    <li class=\"lead\">Alarm Scanner</li>\n                    <li class=\"lead\">Device Viewer</li>\n                    <li class=\"lead\">Device Editor</li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <table>\n                <tr>\n                    <td width='10%' valign='middle'></td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/archiveDemo.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/archiveDemo.png\" >\n                        </a>\n                   </td>\n                    <td width='40%' valign='middle'>\n                        <a href='img/homePage/vectorArchiveDemo.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/vectorArchiveDemo.png\" >\n                        </a>\n                    </td>\n                    <td width='10%' valign='middle'></td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n    </div>\n","output":"str","x":1150,"y":280,"wires":[["769be711.a615b8"]]},{"id":"12d2595e.ca18f7","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Read More","output":"str","x":550,"y":120,"wires":[["d2eb1507.76c958"]]},{"id":"769be711.a615b8","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1270,"y":280,"wires":[]},{"id":"27d40088.1345e","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n        var numTopics = -1;\n        var topicVisibile = [];\n        var topics = ['device', 'deviceController', 'deviceMessageAdapter', 'controlBox', 'userInterface', 'mqttBroker', 'mongoDB', 'coreAppServer', 'customAppServer'];\n        $( document ).ready(function()\n        {\n            numTopics = topics.length;\n            for (var ii = 0; ii < numTopics; ++ii)\n            {\n                $('#' + topics[ii]).hide();\n                topicVisibile[ii] = false;\n            }\n        });\n        function getTopicIndex(topic)\n        {\n            var itopic = -1;\n            for (var ii = 0; ii < numTopics; ++ii)\n            {\n                if (topic == topics[ii])\n                {\n                    itopic = ii;\n                    ii = numTopics;\n                }\n            }\n            return itopic;\n        }\n        function topicClicked(topic)\n        {\n            var itopic = getTopicIndex(topic);\n            if (topicVisibile[itopic])\n            {\n                $('#' + topics[itopic]).hide();\n                $('#' + topics[itopic] + 'Button').html(' (learn more)');\n                topicVisibile[itopic] = false;\n            }\n            else\n            {\n                $('#' + topics[itopic]).show();\n                $('#' + topics[itopic] + 'Button').html(' (show less)');\n                topicVisibile[itopic] = true;\n            }\n        }\n","output":"str","x":410,"y":120,"wires":[["12d2595e.ca18f7"]]},{"id":"d2eb1507.76c958","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/glassesYellow.png\" height=\"70px\"  style='padding-right: 20px;'/>","output":"str","x":680,"y":120,"wires":[["39f8119a.55054e"]]},{"id":"39f8119a.55054e","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"","output":"str","x":840,"y":120,"wires":[["b59b0601.677288"]]},{"id":"b59b0601.677288","type":"template","z":"fb032bb0.bba878","name":"device","field":"payload.device","fieldType":"msg","format":"html","syntax":"mustache","template":"<p class='archLayerText'>\n    A device can be any detector or actuator that has an electrical interface. \n    Common devices are LEDs, switches, temperature probes, ultrasound transducers and receivers, etc. \n    The IoT revolution has brought an  \n    <a class='link-text link-hover' target='_blank' href='https://www.postscapes.com/trackers/video/the-internet-of-things-and-sensors-and-actuators/'>\n        explosion\n    </a> \n    of such devices. Devices can also be more complicated such as an oscilloscope with a programmable interface (USB, ethernet, serial,...)    \n</p>\n","output":"str","x":990,"y":120,"wires":[["d922349.1ccf4c8"]]},{"id":"c46aa9a2.581038","type":"template","z":"fb032bb0.bba878","name":"custom.css","field":"payload.custom.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        .archLayerBulletText\n        {\n          color: var(--container-title-color);\n          font-weight: bold;\n        }\n        .archLayerText\n        {\n          color: #ffffff;\n          font-weight: normal;\n        }\n","output":"str","x":250,"y":120,"wires":[["27d40088.1345e"]]},{"id":"d922349.1ccf4c8","type":"template","z":"fb032bb0.bba878","name":"deviceController","field":"payload.deviceController","fieldType":"msg","format":"html","syntax":"mustache","template":"<p class='archLayerText'>\n    The device controller conditions the signals to and from the device such as digitizing voltages, providing and digital and analog output signals, etc.\n    The device controller is usually  micro-controller such as an \n    <a class='link-text link-hover' target='_blank' href='https://www.arduino.cc/'>\n        Arduino        \n    </a> board. (However, many Blinky-Lite projects are done with the \n    <a class='link-text link-hover' target='_blank' href='https://www.pjrc.com/teensy/'>\n        Teensy\n    </a>\n    family of boards because they provide a very low cost but high performance platform.) \n</p>\n<p class='archLayerText'>\n    These micro-controllers are the swiss army knife of signal conditioning. \n    They provide digitizing channels, pulse width modulation ouput and analog and digital outputs. But they are also very easy to use. \n    The user communicates serially to the boards over a USB interface and the boards are programmed in C/C++ using the \n    <a class='link-text link-hover' target='_blank' href='https://www.arduino.cc/en/Main/Software'>\n        Arduino programming enviroment (IDE)\n    </a>\n    Many IoT vendors such as\n    <a  class='link-text link-hover' target='_blank' href='https://www.adafruit.com/'>\n        AdaFruit\n    </a>\n    and \n    <a class='link-text link-hover' target='_blank' href='https://www.sparkfun.com/'>\n        SparkFun\n    </a>\n    provide libraries for their devices along with step-by-step instructions on how to add these librairies to the Arduino IDE. \n    The Arduino organization has provided an excellent \n    <a class='link-text link-hover' target='_blank' href='https://www.arduino.cc/en/Main/Education'>\n        set of tutorials\n    </a> with basic lessons on IoT electronics and how to program the controllers.\n</p>\n<p class='archLayerText'>\n    In addition to the USB serial interface, these micro-controller boards have a number of additional two-wire serial communication channels. \n    Blinky-Lite uses one of these channels to communicate with the Device Message Adapter. As demonstrated in the \n    <a class='link-text link-hover' href='/tutorial'>\n        Blinky-Lite Tutorial\n    </a> the communication uses binary buffers which provides simple, high speed and robust communication.\n</p>","output":"str","x":1020,"y":160,"wires":[["49662d5e.468944"]]},{"id":"49662d5e.468944","type":"template","z":"fb032bb0.bba878","name":"deviceMessageAdapter","field":"payload.deviceMessageAdapter","fieldType":"msg","format":"html","syntax":"mustache","template":"<p class='archLayerText'>\n    The device message adapter transmits and receives communication to and from the control box via MQTT messages as described in the Control Box description. \n    The device message adapter than translates and transmits this information to the device controller over the serial port between the device controller and the device message adapter. \n    There can be many device message adapters in a control system and in turn, a device message adapter can communicate with several device controllers. \n</p>\n<p class='archLayerText'>\n    This flexibility provides for local autonomous control. \n    For example a single device message adapter could be located in a house to control the temperature of the house. \n    The devices would be some type of thermometer and another device a switch to turn on and off the furnace. \n    The device message adapter would regulate the temperature in the house based on a set point that was communicated to it from the control box. \n    In turn the device message adapter could update the control box (and hence the user) on the status of the house. \n    If communication between the device message adapter and the control box was to be interrupted, the device message adapter would continue to keep the house at the temperature it was last instructed.\n</p>","output":"str","x":1050,"y":200,"wires":[["c8ad797e.a40d58"]]},{"id":"c8ad797e.a40d58","type":"template","z":"fb032bb0.bba878","name":"controlBox","field":"payload.controlBox","fieldType":"msg","format":"html","syntax":"mustache","template":"<p class='archLayerText'>\n    The control box is the heart of the Blinky-Lite architecture. \n    The typical Blinky-Lite control box is a Raspberry Pi  3B computer.  \n    The Raspberry Pi 3B is a low cost, high performance computer that has ethernet, Wifi, and bluetooth communications. \n    The Blinky-Lite tutorial provides instructions on how to setup the Raspberry Pi or disk images that have the Blinky-Lite already installed.  \n</p>\n<p class='archLayerText'>\n    The control box has four major components:\n</p>\n<ul>\n    <li class='archLayerBulletText'>\n        MQTT broker\n        <button class=\"btn btn-link link-text link-hover\" id='mqttBrokerButton' type=\"button\" onclick=\"topicClicked('mqttBroker')\" style='text-align:center;'>\n            (learn more)\n        </button>\n        <div id='mqttBroker'>\n            <p class='archLayerText'>\n                MQTT is a very popular IoT communication protocol that was invented by IBM in 1999 \n                for connecting oil pipelines over satellite connection and is now an open source platform. \n                MQTT is designed to be reliable, data-agnostic, and lightweight and is quickly becoming the protocol of choice for IoT. \n            </p>\n            <p class='archLayerText'>\n                MQTT messages consist of a topic and payload. \n                The topic is a hierarchical character string with the hierarchy defined by forward slashes. \n                This hierarchy allows for the use of wildcards. \n                For example, let’s say that there are many buildings providing temperature readings to a MQTT broker.  \n                Some of these buildings could be homes, others are factories; all with different locations. \n                By putting the building type and address in the topic, one could subscribe to temperature readings only homes in a given area. \n            </p>\n            <p class='archLayerText'>\n                The MQTT payload can be anything from a text string, to a number to an image. \n                The user just has to know ahead of time what the format of the data will be.  \n                Blinky-Lite uses JSON strings  which is a very compact and readable way of writing data.\n            </p>\n            <p class='archLayerText'>\n                Users keep an open connection to the MQTT broker and subscribe or publish to topics. \n                If a user is subscribing to given topic and another user publishes a payload to that topic \n                than the first user will receive a notification that a new payload is  available for the topic. \n                This eliminates the need for polling and provides a buffer to keep a device from being overloaded with too many requests. \n            </p>\n            <p class='archLayerText'>\n                For example, assume a single device is measuring a temperature but there are over a 1000 users that want to know this temperature. \n                In a conventional distributed system, each user would make a request to the device for the temperature value. \n                If each user wants to know the temperature as a function of time, then each user must poll the device periodically for the temperature value. \n                With so many users, this could easily overwhelm the device providing the temperature reading.\n            </p>\n            <p class='archLayerText'>\n                With Blinky-Lite and MQTT, the device publishes the temperature to the broker when the device is ready \n                (i.e. the temperature has changed or at a certain rate). \n                The users are connected to the MQTT broker and subscribe to the temperature topic. \n                When the topic is updated, the users get a notification that it has been updated and retrieve the data from the broker - not the device.\n            </p>\n            <p class='archLayerText'>\n                Blinky-Lite uses the Eclipse Mosquitto MQTT broker which is an open source broker. \n            </p>\n        </div>\n    </li>\n    <li class='archLayerBulletText'>\n        MongoDB Database\n        <button class=\"btn btn-link link-text link-hover\" id='mongoDBButton' type=\"button\" onclick=\"topicClicked('mongoDB')\" style='text-align:center;'>\n            (learn more)\n        </button>\n        <div id='mongoDB'>\n            <p class='archLayerText'>\n                All control systems need to store data. \n                To provide flexibility for the type of data to be stored, Blinky lite uses MongoDB which is an open-source, non-relational  database. \n                Another advantage of MongoDB is that queries and data are in JSON objects which is a natural fit to the javascript programming environment of Blinky-Lite. \n            </p>\n            <p class='archLayerText'>\n                Blinky-Lite has two databases, the Devices database and the Archiver database. \n                The Devices database contains a single record for each device in the control system. \n                The Archiver database has many entries for a single device.  \n                A Device is considered to be a unique MQTT topic. \n                Any topic is possible but this would make developing user applications problematic. \n                Blinky-Lite specifies the device topic have the following seven fields:\n            </p>\n            <p class='archLayerText'>\n                sys01/sys02/sys03/sys04/device/attr/prop\n            </p>\n            <p class='archLayerText'>\n                An example topic would be:\n            </p>\n            <p class='archLayerText'>\n                R3/rfroom/02/diag/oo/beamCurrent/reading\n            </p>\n            <p class='archLayerText'>\n                Stored in the record are device attributes such as alarm limits, archiving rate, and the latest data value along with timestamp for the device. \n                Blinky-Lite currently supports two types of data structures, scalar and vector. \n                However the flexible nature of MongoDB will permit many other types of data structures such as images.\n            </p>\n            <p class='archLayerText'>\n                The Blinky-Lite core application server subscribes to all MQTT topics in a Blinky-Lite control system. \n                When a new message is published, the data is stored in the Devices database. \n                The core application server then looks to see when the device data was last written to the Archiver \n                database and decides to write a new record to the Archiver database based on the archiving rate for the device.\n            </p>\n        </div>\n    </li>\n    <li class='archLayerBulletText'>\n        Core app server\n        <button class=\"btn btn-link link-text link-hover\" id='coreAppServerButton' type=\"button\" onclick=\"topicClicked('coreAppServer')\" style='text-align:center;'>\n            (learn more)\n        </button>\n        <div id='coreAppServer'>\n            <p class='archLayerText'>\n                The data collected by the database must eventually be consumed by the user. \n                Blinky-Lite provides seven web-based applications for the end user that access the MongoDB database.\n            </p>\n            <ul>\n                <li class='archLayerText'>\n                    Scalar Device Plotter - Plots a number of scalar devices in real time\n                </li>\n                <li class='archLayerText'>\n                    Scalar Device Archive Plotter - Retrieves and plots the history over a specified time period for a number of scalar devices. Data can also be downloaded into a csv file.\n                </li>\n                <li class='archLayerText'>\n                    Vector Device Plotter - Plots a single vector device in real time. The display provides a number of different views.\n                </li>\n                <li class='archLayerText'>\n                    Vector Device Archive Plotter - Retrieves and plots the history over a specified time period for a single vector device. The display provides a number of different views. Data can also be downloaded into a csv file.\n                </li>\n                <li class='archLayerText'>\n                    Alarm Scanner - Displays devices that are outside their alarm limits. The alarms can be filtered by device name. Also audible alarming can be enabled.\n                </li>\n                <li class='archLayerText'>\n                    Device Viewer - The current values of a number of scalar devices are displayed. It is also possible to set the device values and then have the message broadcasted.\n                </li>\n                <li class='archLayerText'>\n                    Device Editor - A tool for creating new devices or modifying existing devices\n                </li>\n            </ul>\n        </div>\n    </li>\n    <li class='archLayerBulletText'>\n        Custom app server\n        <button class=\"btn btn-link link-text link-hover\" id='customAppServerButton' type=\"button\" onclick=\"topicClicked('customAppServer')\" style='text-align:center;'>\n            (learn more)\n        </button>\n        <div id='customAppServer'>\n            <p class='archLayerText'>\n                In case the applications available in the Core app server are not sufficient for the user needs, \n                a custom app server can be implemented. The custom app server is encased in a Node-Red application. \n            </p>                \n        </div>\n    </li>\n</ul>","output":"str","x":1010,"y":240,"wires":[["1573ea5d.99fd16"]]},{"id":"1573ea5d.99fd16","type":"template","z":"fb032bb0.bba878","name":"userInterface","field":"payload.userInterface","fieldType":"msg","format":"html","syntax":"mustache","template":"<p class='archLayerText'>\n    Applications for control and monitoring of the devices must be available to the user. \n    Blinky-Lite uses web applications for these type of applications. \n    Modern web browsers provide powerful plotting and graphical environments. \n    A web applications is a much better way to control deployment for these applications. \n    The web applications communicate with the server using websockets which allow real-time communication among different clients connected to a server.\n</p>","output":"str","x":1010,"y":280,"wires":[["ecc79992.f96468"]]},{"id":"698c2e56.3ec88","type":"comment","z":"e8763d21.b7461","name":"old color scheme","info":"        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #7395ae;\n          --background-text: #f6d7a2;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n ","x":160,"y":160,"wires":[]}]