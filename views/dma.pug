extends layout
block content
  .jumbotron
    h1.text-warning Building a Device Message Adapter
    p This section will show you how to build a Device Message Adapter (DMA) in Node-Red on a Raspberry-Pi. 
      | The DMA is the interface between the MQTT broker and the device you want to control.
    h2 
      a(NAME='contents') Table of Contents
    p
      ul
        li
          a(href='#installnodered').text-warning Installing Node-Red on a Raspberry-Pi
        li
          a(href='#runningnodered').text-warning Running Node-Red on a Raspberry-Pi
        li
          a(href='#addingFlows').text-warning Adding Flows To Node-RED
        li
          a(href='#specifyingMqtt').text-warning Specifying the MQTT Broker
        li
          a(href='#investigatingNodes').text-warning Investigating Node-RED Nodes
  h2 
    a(NAME='installnodered') Starting Node-Red on a Raspberry-Pi 
    span(style='font-size: small;')
      a(href='#contents') Table of contents
  p The Raspberry-Pi distribution comes with Node-RED already installed. 
    | However, we would like to be able to customize Node-RED for every application. 
    | Thus we will run Node-RED locally out of a application directory. 
    | Then using the Node-Package-Manager (
    b
      a(href='https://www.npmjs.com/', target='_blank') npm
    | ) we can customize our application. In addition, Node-RED has a settings.js file 
    | in which security settings are set that we would also like to customize. 
    | At Blinky-Lite, we have come up with a 
    a(href='/img/tutorial/empty-node-red.zip') blank template Adding Flows To Node-RED
    | to get us started.
    br
    | Log into the Raspberry-Pi that is connected to the Arduino Uno. 
    | From the home directory of the Raspberry-Pi (/home/pi) type:
    br
    code wget https://github.com/Blinky-Lite/blinky-lite-tutorial/archive/empty-node-red.zip
    br
    | Unzip the file:http://www.blinky-lite.org/tutorial/dma
    br
    code unzip empty-node-red.zip
    br
    | To cleanup, Remove the zip file: 
    br
    code rm empty-node-red.zip
    br
    | Look for the downloaded directory by typing: 
    br
    code ls
    br
    | You should see a directory called blinky-lite-tutorial-empty-node-red. Let’s rename this to something more specific like 
    b 
      i blinky-lite-tutorial-dma 
    br
    code mv blinky-lite-tutorial-empty-node-red blinky-lite-tutorial-dma
    br
    | Enter the directory: 
    br
    code cd blinky-lite-tutorial-dma
    br
    | And install the node-red program by typing: 
    brRunning Node-Red on a Raspberry-Pi
    code npm install
    br
    | The required node-modules will be installed. This might take awhile if you are using  a Raspberry-Pi Zero.
    br
    | During the process of building the DMA, Node-RED will need to store credentials such as the username 
    | and password for the MQTT broker. By default, credentials are encrypted in storage using a generated key.  
    | This storage is defined in the 
    b
      i settings.js 
    | file found in the application directory. The template you downloaded from Blinky-Lite sets the key up in a file called 
    b
      i .env
    | .  Normally you want a different key for every application and you do not want to store this key publically so the 
    bAdding Flows To Node-RED
      i .env 
    | file is not included with the template. To create the 
    b
      i .env 
    | file, at the terminal type:
    br
    code echo NODEREDCONFIGSECRET=
      b
        i your-key 
    br
    | Where Adding Flows To Node-RED
    b 
      i your-key 
    | is a key that you define with only letter, numbers, and dashes.
  hr
  h2 
    a(NAME='runningnodered') Running Node-Red on a Raspberry-Pi 
    span(style='font-size: small;')
      a(href='#contents') Table of contents
  p  
    | Next, run the application has been installed, run it by typing: 
    br
    code source runNodeRed.sh
    br
    | The program will begin to run and you should see the following output in the terminal: 
    br
    img(src='/img/tutorial/noderedstartterm.png', width='50%') 
    br
    | You can kill the program any time by typing 
    b 
      i Ctrl-c. 
    | However, leave the program running and on another computer on youhttp://www.blinky-lite.org/tutorial/dmar local wireless network 
    | (i.e. your desktop computer), open a browser (Chrome or Firefox recommended - 
    b never IE !
    | ) type the following address: 
    br
    code http://http://www.blinky-lite.org/tutorial/dma
      b
        i host-name
      | .local:1880/
    br
    | Where 
    b
      i hostname 
    | is the host name of the Raspberry-Pi that you chose in the 
    a(href='/tutorial/setupRPi#connecting', target='_blank') Setting Up a Raspberry-Pi for Blinky-Lite 
    | tutorial. In my case, the hostname was 
    b 
      i blinky-lite-12
    | . You will see a log-in to Node-RED:
    br
    img(src='/img/tutorial/noderedsplash.png', width='50%') 
    br
    | The username and password are setup in the settings.js file of the application directory. 
    | We will discuss how to change them later. But the template that we provided has the username set to 
    b
      i admin 
    | and the password set to 
    b 
      i password
    |. Enter these values. You will see the following screen:  
    br
    img(src='/img/tutorial/noderedemptyflow.png', width='50%') 
    br
  hr
  h2 
    a(NAME='addingFlows') Adding Flows To Node-RED 
    span(style='font-size: small;')
      a(href='#contents') Table of contents
  p  
    | Now we will add flows to our Node-RED application. In order to avoid making the tutorial tedious, we will not describe the flows node by 
    | node but instead import the flows and then discuss the architecture and let the user investigate the 
    | details further. Node-RED Flows are stored in 
    a(href='https://www.json.org/', target='_blank') JSON 
    | strings which make it very nice for version control and sharing. First, Select the 
    b
      i Hello 
    | node and delete it and then press the 
    b
      i Deploy 
    | button. Copy the following flows to the clipboard by  clicking the 
    b
      i Copy DMA Flows To Clipboard 
    | button below:
    br
    .row  
      .col-md-3
        button.btn.card-button(onclick='CopyToClipboard("dmaflows", "Flows Copied to Clipboard")') Copy DMA Flows To Clipboard
      .col-md-6
        div#dmaflows.scrolling-wrapper [{"id":"465cfd27.107674","type":"tab","label":"Red LED DMA","disabled":false,"info":""},{"id":"1abf3c75.e6d024","type":"tab","label":"Green LED DMA","disabled":false,"info":""},{"id":"6ad7c930.1a06b8","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}}},"site":{"name":"Blinky-Lite-Tutorial","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"ddd272b6.33c42","type":"mqtt-broker","z":"","name":"MQTT-dma","broker":"yourMQTTbrokerURL","port":"1883","clientid":"blinky-lite-tutorial-dma","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"a617aefc.4918d","type":"arduino-board","z":"","device":"/dev/ttyACM0"},{"id":"262b6cae.fe0b94","type":"mqtt out","z":"465cfd27.107674","name":"","topic":"","qos":"0","retain":"true","broker":"ddd272b6.33c42","x":1170,"y":200,"wires":[]},{"id":"87b969ce.fb53b8","type":"function","z":"465cfd27.107674","name":"Adapt to MQTT","func":"return {'topic':'blinky-lite-tutorial/dma/red/' + msg.topic,'payload':msg.payload};","outputs":1,"noerr":0,"x":1000,"y":200,"wires":[["262b6cae.fe0b94"]]},{"id":"6243729.bae208c","type":"mqtt in","z":"465cfd27.107674","name":"","topic":"blinky-lite-tutorial/web-app/red/#","qos":"0","broker":"ddd272b6.33c42","x":170,"y":240,"wires":[["25ee484a.aa07a8"]]},{"id":"25ee484a.aa07a8","type":"json","z":"465cfd27.107674","name":"","property":"payload","action":"","pretty":false,"x":370,"y":240,"wires":[["174ff73a.4e0499"]]},{"id":"174ff73a.4e0499","type":"function","z":"465cfd27.107674","name":"Parse MQTT","func":"msg.topic = msg.topic.substring(msg.topic.lastIndexOf('/') + 1);\nflow.set(msg.topic,msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":240,"wires":[["ae0ea12a.6f83d"]]},{"id":"b107d91b.d14b08","type":"function","z":"465cfd27.107674","name":"Button Debouncer","func":"if (msg.payload == 0) return null;\nvar thisPress = new Date().getTime();\nvar lastPress = context.get('lastPress');\nif (lastPress == undefined) lastPress = 0;\nif ((thisPress - lastPress) < 500 ) return null;\nvar ledState  = flow.get('ledState');\nledState = ledState + 1;\nif (ledState > 2) ledState = 0;\ncontext.set('lastPress',thisPress);\nmsg.topic = 'ledState';\nmsg.payload = ledState;\nreturn msg;","outputs":1,"noerr":0,"x":490,"y":120,"wires":[["ae0ea12a.6f83d"]]},{"id":"f2184265.5872d","type":"arduino in","z":"465cfd27.107674","name":"Button","pin":"8","state":"INPUT","arduino":"a617aefc.4918d","x":90,"y":120,"wires":[["b107d91b.d14b08"]]},{"id":"d83d4f80.21f96","type":"inject","z":"465cfd27.107674","name":"","topic":"ledState","payload":"1","payloadType":"num","repeat":"","crontab":"","once":true,"onceDelay":"3","x":510,"y":80,"wires":[["ae0ea12a.6f83d"]]},{"id":"b8d60c77.daaf1","type":"arduino in","z":"465cfd27.107674","name":"Pot","pin":"0","state":"ANALOG","arduino":"a617aefc.4918d","x":90,"y":180,"wires":[["2273880a.9427a8"]]},{"id":"2273880a.9427a8","type":"function","z":"465cfd27.107674","name":"Pot Blocker","func":"var lastReading = context.get('lastReading');\nif (lastReading == undefined) lastReading = -1;\nvar deltaReading = Math.abs(msg.payload - lastReading);\nif (deltaReading < 10 ) return null;\ncontext.set('lastReading', msg.payload);\nmsg.payload = Math.round(100.0 * (5.0 / 3.3) * msg.payload / 1024.0);\nmsg.topic = 'ledIntensity';\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":180,"wires":[["ae0ea12a.6f83d"]]},{"id":"d0d6c694.6f0bc8","type":"inject","z":"465cfd27.107674","name":"Blinker","topic":"blinker","payload":"","payloadType":"date","repeat":"0.001","crontab":"","once":true,"onceDelay":0.1,"x":520,"y":280,"wires":[["ae0ea12a.6f83d"]]},{"id":"ae0ea12a.6f83d","type":"function","z":"465cfd27.107674","name":"LED Controller","func":"if (msg.topic != 'blinker') flow.set(msg.topic, msg.payload);\nvar ledValue = context.get('ledValue');\nif (ledValue == undefined) ledValue = -1;\nvar ledIntensity = flow.get('ledIntensity');\nif (ledIntensity == undefined) ledIntensity = 90;\nvar ledState = flow.get('ledState');\nif (ledState == undefined) ledState = 1;\nvar ledToggle = flow.get('ledToggle');\nif (ledToggle == undefined) ledToggle = 250;\nif (msg.topic != 'blinker')\n{\n    if (ledState == 0)\n    {\n        ledValue = 0;\n    }\n    if (ledState == 2) \n    {\n        ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n    }\n}\nelse\n{\n    ledValue = -1;\n    var counter = context.get('counter');\n    if (counter == undefined) counter = 0;\n    if (ledState == 1)\n    {\n        if (counter == 0)\n        {\n            ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n        }\n        if (counter == ledToggle)\n        {\n            ledValue = 0;\n        }\n    }\n    counter  = counter + 1;\n    if (counter > (ledToggle * 2)) counter = 0;\n    context.set('counter',counter);\n    \n    msg = null;\n}\nvar ledMsg = {'topic':'ledValue', 'payload':ledValue};\nif (ledValue < 0) ledMsg =  null;\nreturn [ledMsg, msg];","outputs":2,"noerr":0,"x":780,"y":180,"wires":[["d9704691.6989e8"],["87b969ce.fb53b8"]]},{"id":"d9704691.6989e8","type":"arduino out","z":"465cfd27.107674","name":"Led","pin":"10","state":"PWM","arduino":"a617aefc.4918d","x":970,"y":140,"wires":[]},{"id":"811444e.8abb8b8","type":"inject","z":"465cfd27.107674","name":"","topic":"ledToggle","payload":"25","payloadType":"num","repeat":"","crontab":"","once":true,"onceDelay":"2","x":510,"y":40,"wires":[["ae0ea12a.6f83d"]]},{"id":"d07b1c63.f534e","type":"mqtt out","z":"1abf3c75.e6d024","name":"","topic":"","qos":"0","retain":"true","broker":"ddd272b6.33c42","x":1170,"y":200,"wires":[]},{"id":"670b6233.900d6c","type":"function","z":"1abf3c75.e6d024","name":"Adapt to MQTT","func":"return {'topic':'blinky-lite-tutorial/dma/green/' + msg.topic,'payload':msg.payload};","outputs":1,"noerr":0,"x":1000,"y":200,"wires":[["d07b1c63.f534e"]]},{"id":"ff285190.b2cde","type":"mqtt in","z":"1abf3c75.e6d024","name":"","topic":"blinky-lite-tutorial/web-app/green/#","qos":"0","broker":"ddd272b6.33c42","x":160,"y":240,"wires":[["3d84bab8.462356"]]},{"id":"3d84bab8.462356","type":"json","z":"1abf3c75.e6d024","name":"","property":"payload","action":"","pretty":false,"x":370,"y":240,"wires":[["15c5e855.468858"]]},{"id":"15c5e855.468858","type":"function","z":"1abf3c75.e6d024","name":"Parse MQTT","func":"msg.topic = msg.topic.substring(msg.topic.lastIndexOf('/') + 1);\nflow.set(msg.topic,msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":240,"wires":[["79b63aa5.f08fa4"]]},{"id":"3b626ccb.497094","type":"function","z":"1abf3c75.e6d024","name":"Button Debouncer","func":"if (msg.payload == 0) return null;\nvar thisPress = new Date().getTime();\nvar lastPress = context.get('lastPress');\nif (lastPress == undefined) lastPress = 0;\nif ((thisPress - lastPress) < 500 ) return null;\nvar ledState  = flow.get('ledState');\nledState = ledState + 1;\nif (ledState > 2) ledState = 0;\ncontext.set('lastPress',thisPress);\nmsg.topic = 'ledState';\nmsg.payload = ledState;\nreturn msg;","outputs":1,"noerr":0,"x":490,"y":120,"wires":[["79b63aa5.f08fa4"]]},{"id":"4ee4c26d.196bfc","type":"arduino in","z":"1abf3c75.e6d024","name":"Button","pin":"7","state":"INPUT","arduino":"a617aefc.4918d","x":90,"y":120,"wires":[["3b626ccb.497094"]]},{"id":"2355ca22.ddf556","type":"inject","z":"1abf3c75.e6d024","name":"","topic":"ledState","payload":"1","payloadType":"num","repeat":"","crontab":"","once":true,"onceDelay":"3","x":510,"y":80,"wires":[["79b63aa5.f08fa4"]]},{"id":"3f40bc50.4be6d4","type":"arduino in","z":"1abf3c75.e6d024","name":"Pot","pin":"1","state":"ANALOG","arduino":"a617aefc.4918d","x":90,"y":180,"wires":[["32146bce.fa87e4"]]},{"id":"32146bce.fa87e4","type":"function","z":"1abf3c75.e6d024","name":"Pot Blocker","func":"var lastReading = context.get('lastReading');\nif (lastReading == undefined) lastReading = -1;\nvar deltaReading = Math.abs(msg.payload - lastReading);\nif (deltaReading < 10 ) return null;\ncontext.set('lastReading', msg.payload);\nmsg.payload = Math.round(100.0 * (5.0 / 3.3) * msg.payload / 1024.0);\nmsg.topic = 'ledIntensity';\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":180,"wires":[["79b63aa5.f08fa4"]]},{"id":"a5d77a8c.697998","type":"inject","z":"1abf3c75.e6d024","name":"Blinker","topic":"blinker","payload":"","payloadType":"date","repeat":"0.001","crontab":"","once":true,"onceDelay":0.1,"x":520,"y":280,"wires":[["79b63aa5.f08fa4"]]},{"id":"79b63aa5.f08fa4","type":"function","z":"1abf3c75.e6d024","name":"LED Controller","func":"if (msg.topic != 'blinker') flow.set(msg.topic, msg.payload);\nvar ledValue = context.get('ledValue');\nif (ledValue == undefined) ledValue = -1;\nvar ledIntensity = flow.get('ledIntensity');\nif (ledIntensity == undefined) ledIntensity = 90;\nvar ledState = flow.get('ledState');\nif (ledState == undefined) ledState = 1;\nvar ledToggle = flow.get('ledToggle');\nif (ledToggle == undefined) ledToggle = 250;\nif (msg.topic != 'blinker')\n{\n    if (ledState == 0)\n    {\n        ledValue = 0;\n    }\n    if (ledState == 2) \n    {\n        ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n    }\n}\nelse\n{\n    ledValue = -1;\n    var counter = context.get('counter');\n    if (counter == undefined) counter = 0;\n    if (ledState == 1)\n    {\n        if (counter == 0)\n        {\n            ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n        }\n        if (counter == ledToggle)\n        {\n            ledValue = 0;\n        }\n    }\n    counter  = counter + 1;\n    if (counter > (ledToggle * 2)) counter = 0;\n    context.set('counter',counter);\n    \n    msg = null;\n}\nvar ledMsg = {'topic':'ledValue', 'payload':ledValue};\nif (ledValue < 0) ledMsg =  null;\nreturn [ledMsg, msg];","outputs":2,"noerr":0,"x":780,"y":180,"wires":[["f7acb06c.b15c2"],["670b6233.900d6c"]]},{"id":"f7acb06c.b15c2","type":"arduino out","z":"1abf3c75.e6d024","name":"Led","pin":"9","state":"PWM","arduino":"a617aefc.4918d","x":970,"y":140,"wires":[]},{"id":"60fb5c3d.a70cb4","type":"inject","z":"1abf3c75.e6d024","name":"","topic":"ledToggle","payload":"25","payloadType":"num","repeat":"","crontab":"","once":true,"onceDelay":"2","x":510,"y":40,"wires":[["79b63aa5.f08fa4"]]}]
    | You will now see a screen with three tabs (flows).
    br 
    img(src='/img/tutorial/threeTabDma.png', width='50%') 
    br
    | Delete the empty 
    b
      i Flow 1 
    | flow by double clicking on the 
    b
      i Flow 1 
    | tab and select the delete button
    br
    img(src='/img/tutorial/deleteFlow1.png', width='50%') 
    br
    | You will be left with two tabs (flows)  - Red LED DMA flow and Green LED DMA flow. 
  hr
  h2 
    a(NAME='specifyingMqtt') Specifying the MQTT Broker 
    span(style='font-size: small;')
      a(href='#contents') Table of contents
  p  
    | These flows are ready to be deployed except the MQTT broker needs to be specified. 
    | In the tutorial, 
    a(href='/tutorial/setupRPi#mqtt', target='_blank') Setting Up a Raspberry-Pi for Blinky-Lite
    | , you installed on MQTT broker on the same Raspberry-Pi as you are now using as the DMA. 
    | In general, the MQTT broker would be running on a linux computer from the DMA. 
    | However for simplicity, we will use the MQTT broker that is running on DMA.
    ul
      li Double click on the mqtt node on the upper right hand side of either the Red or Green flow. 
      li There will be a pencil icon/button next to the name of the MQTT broker (MQTT-dma). Click on that icon. 
      li Under the Connection tab, in the Server Box, is the placeholder for the URL for the MQTT 
        | broker currently set at  
        b
          i yourMQTTbrokerURL
        | . Replace the placeholder with 
        b
          i hostname
        | .local where hostname is 
        | the hostname of your Raspberry Pi. 
      li Under the Security Tab, Set the username and password to the values you set in the 
        a(href='/tutorial/setupRPi#mqtt', target='_blank') Setting Up a Raspberry-Pi for Blinky-Lite 
        | part of the tutorial. In my case the broker URL is blinky-lite-12.local, the MQTT username is blinky-lite-12. 
      li Once you have edited the mqtt-broker node with the server URL, and the Security username and password, click Update. 
      li Then click Done to exit out of the Edit mqtt node, 
      li and finally click Deploy to deploy the flow. 
    | You should see green boxes next to the MQTT and Arduino nodes and the 
    b Blinky-Lite circuit should be blinking!
    br
    img(src='/img/tutorial/dmaWorking.png', width='50%') 
    br
  hr
  h2 
    a(NAME='investigatingNodes') Investigating Node-RED Nodes 
    span(style='font-size: small;')
      a(href='#contents') Table of contents
  p  
  
  script.
    function CopyToClipboard(containerid, messageText) {
    if (document.selection) { 
        var range = document.body.createTextRange();
        range.moveToElementText(document.getElementById(containerid));
        range.select().createTextRange();
        document.execCommand("copy"); 

    } else if (window.getSelection) {
        var range = document.createRange();
         range.selectNode(document.getElementById(containerid));
         window.getSelection().addRange(range);
         document.execCommand("copy");
         alert(messageText) 
    }}
    
      
      
