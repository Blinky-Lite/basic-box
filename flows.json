[{"id":"fb032bb0.bba878","type":"tab","label":"Home","disabled":false,"info":""},{"id":"ed22476a.57d2f8","type":"tab","label":"New Version","disabled":false,"info":""},{"id":"e8763d21.b7461","type":"subflow","name":"Old HTML","info":"","category":"","in":[{"x":20,"y":40,"wires":[]}],"out":[],"env":[]},{"id":"5cd741ff.0cac8","type":"subflow","name":"Core NavBar","info":"","category":"","in":[{"x":60,"y":80,"wires":[{"id":"f93ad39b.4fa9"}]}],"out":[{"x":340,"y":80,"wires":[{"id":"f93ad39b.4fa9","port":0}]}],"env":[]},{"id":"639505ca.481e8c","type":"subflow","name":"Core CSS","info":"","category":"","in":[{"x":60,"y":80,"wires":[{"id":"b7e65e21.fdde3"}]}],"out":[{"x":320,"y":80,"wires":[{"id":"b7e65e21.fdde3","port":0}]}],"env":[]},{"id":"2c6a590c.6fc7f6","type":"subflow","name":"HTML","info":"","category":"","in":[{"x":60,"y":40,"wires":[{"id":"53535317.58e45c"}]}],"out":[],"env":[]},{"id":"49b38655.0b6f38","type":"subflow","name":"Core HTML","info":"","category":"","in":[{"x":60,"y":80,"wires":[{"id":"c47e1f2c.28944"}]}],"out":[],"env":[]},{"id":"6ad7c930.1a06b8","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}}},"site":{"name":"Oscillation Overthruster Display","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"f6f711c0.7ba24","type":"mongodb3","z":"","uri":"$(MONGODBIP)","name":"blinky-lite","options":"","parallelism":"-1"},{"id":"6a98847b.d35aac","type":"mongodb3","z":"","uri":"$(MONGODBIP)","name":"blinky-lite","options":"","parallelism":"-1"},{"id":"5e063c54.f89de4","type":"websocket-listener","z":"","path":"/access-log/websocket","wholemsg":"false"},{"id":"43ac8ec.9bf207","type":"template","z":"e8763d21.b7461","name":"HTML","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>","output":"str","x":790,"y":40,"wires":[["f1df0c69.8fcb1"]]},{"id":"99432fa.98673d","type":"template","z":"e8763d21.b7461","name":"Foot","field":"payload.foot","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Foot -->\n    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <hr>\n    <div width=\"100%\" style='padding-top:10px;padding-bottom:10px'>\n        <table width='100%'>\n            <tr valign=\"middle\">\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"/old\" ><img src=\"/img/home.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"home\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"/readmore\" ><img src=\"/img/glasses.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Read More\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"/tutorial\" ><img src=\"/img/book.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Tutorial\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"https://twitter.com/BlinkyLite\" target=\"_blank\"><img src=\"/img/twitter.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Twitter\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"https://github.com/Blinky-Lite\" target=\"_blank\"><img src=\"/img/github.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Github\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"16.6%\" align='center'>\n                    <a href=\"mailto:info@blinky-lite.io\"><img src=\"/img/mail.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Contact\" /></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <hr>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" ></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\" ></script>\n","output":"str","x":670,"y":40,"wires":[["43ac8ec.9bf207"]]},{"id":"4ac3208f.90f57","type":"template","z":"e8763d21.b7461","name":"Head","field":"payload.head","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Head -->\n    <meta charset=\"UTF-8\"/>\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-122300334-1\"></script>\n    <script>\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n    \n      gtag('config', 'UA-122300334-1');\n    </script>\n    <!-- Custom CSS -->\n    <style>\n{{{payload.css}}}\n{{{payload.custom.css}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>","output":"str","x":550,"y":40,"wires":[["99432fa.98673d"]]},{"id":"9f84c5ba.086818","type":"template","z":"e8763d21.b7461","name":"navBar","field":"payload.navBar","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- navBar -->\n    <div width=\"100%\" style='padding-top:10px;padding-bottom:10px'>\n        <table width='100%'>\n            <tr valign=\"middle\">\n                <td valign=\"middle\" width=\"14.3%\" align='left'>\n                    <img src=\"/img/BlinkyLogo.gif\" height=\"50px\" />\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"/old\" ><img src=\"/img/home.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"home\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"/readmore\" ><img src=\"/img/glasses.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Read More\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"/tutorial\" ><img src=\"/img/book.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Tutorial\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"https://twitter.com/BlinkyLite\" target=\"_blank\"><img src=\"/img/twitter.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Twitter\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"https://github.com/Blinky-Lite\" target=\"_blank\"><img src=\"/img/github.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Github\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"14.3%\" align='center'>\n                    <a href=\"mailto:info@blinky-lite.io\"><img src=\"/img/mail.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Contact\" /></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"jumbotron\" width=\"100%\">\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"text-align: center\">\n                <h1 class=\"jumbotron-title\">{{{payload.appicon}}}{{{payload.title}}}</h1>\n            </div>\n        </div>\n{{{payload.jumbotronExtras}}}\n    </div>","output":"str","x":420,"y":40,"wires":[["4ac3208f.90f57"]]},{"id":"233dd1ed.d17ede","type":"http response","z":"e8763d21.b7461","name":"","statusCode":"","headers":{},"x":1190,"y":40,"wires":[]},{"id":"91e3585b.224158","type":"template","z":"e8763d21.b7461","name":"CSS","field":"payload.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #7395ae;\n          --background-text: #f6d7a2;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #ffffff;\n          --background-text: #7395ae;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n        ul {\n            list-style-type: disk;\n        }\n        li {\n            vertical-align:middle;\n        }\n        code {\n            display:block;\n            padding-top:5px;\n            padding-bottom:5px;\n            background-color: var(--sub-container-text-color);\n            color: var(--sub-container-title-color);\n        }\n        body {\n          background-color: var(--background-color);\n          padding-left:25px;\n          padding-right:25px;\n        }\n        .link-text {\n          color: var(--background-text);\n          text-decoration: underline;\n          font-weight: bold;\n\n        }\n        :hover.link-hover {\n          color: var(--container-title-color);\n          text-decoration: underline;\n        }\n       .link-icon {\n          padding: 1px;\n          color: var(--container-background-color);\n        }\n       .link-icon-hover {\n          padding: 1px;\n          color: var(--background-text);\n        }\n        \n        img {\n          object-fit: contain;\n        }\n        .col {\n          padding-bottom: 20px;\n        }\n        .jumbotron {\n          background-color: var(--container-background-color) !important;\n          color:var(--container-text-color);\n          padding-bottom: 10px;\n          padding-top: 10px;\n        }\n        .jumbotron-link\n        {\n            color: var(--container-title-color);\n        }\n        :hover.jumbotron-link-hover\n        {\n            color: var(--background-text);\n        }    \n        .jumbotron-title\n        {\n          color:var(--container-title-color);\n        }\n        .jumbotron-button\n        {\n          color: var(--container-background-color)  !important;\n          background-color: var(--container-title-color);\n        }\n        .lead\n        {\n          color: var(--background-text);\n       }\n        .featurette-heading\n        {\n          color:var(--container-background-color);\n        }\n        .featurette-heading-link\n        {\n          color: var(--container-title-color);\n        }\n        .card\n        {\n          background-color: var(--container-background-color);\n          text-align: center;\n          padding: 10px;\n        }\n        .card-body\n        {\n          color: var(--sub-container-text-color);\n          background-color: var(--sub-container-background-color);\n        }\n        .card-button\n        {\n          color: var(--background-color);\n          font-weight: bold;\n          background-color: var(--container-background-color);\n        }\n        .card-title\n        {\n          color: var(--container-title-color);\n          font-weight: bold;\n        }\n        .card-major-bullet\n        {\n          text-align: left;\n        }\n        .card-minor-bullet\n        {\n          text-align: left;\n        }\n        .card-minor-minor-bullet {\n        \tfont-size:  small;\n          font-style:italic;\n        }\n         .card-text\n        {\n          text-align: left;\n        }\n         .card-text-link\n        {\n            color: var(--container-background-color);\n            text-decoration: underline;\n        }\n         .card-link\n        {\n            color: var(--sub-container-background-color);\n            text-decoration: underline;\n        }\n        .scrolling-wrapper {\n          width: 100%;\n          display: inline-block;\n          overflow-x: scroll;\n          overflow-y: hidden;\n          white-space: nowrap;\n        }\n        .footer {\n        /*   position: fixed; */\n           left: 0;\n           bottom: 0;\n           width: 100%;\n           color:var(--container-background-color);\n           background-color: var(--background-color);\n           text-align: center;\n        }\n        .img-max {\n          width: 99%;\n        }\n        .bot-pad\n        {\n          padding-bottom: 20px;\n        }\n        .span-left-justify\n        {\n          float:left;\n        }\n        .right-justify\n        {\n          text-align: right;\n        }\n        .left-justify\n        {\n          text-align: left;\n        }\n        .center-justify\n        {\n          text-align: center;\n        }\n        .radio-button-border\n        {\n          border-style: solid;\n          border-color: var(--container-title-color);\n          border-width: 2px;\n        }\n        .tableHeading\n        {\n          color:var(--background-text);\n          font-weight: 900;\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-weight: 900;\n        }\n        .custom-select\n        {\n          color: var(--container-text-color);\n          background-color: var(--background-color);\n        \n        }\n        .plain-text\n        {\n            color: var(--sub-container-text-color);\n            font-size:medium;\n        }\n","output":"str","x":130,"y":40,"wires":[["47ebd6c.9f66a28"]]},{"id":"47ebd6c.9f66a28","type":"template","z":"e8763d21.b7461","name":"Utility Scripts","field":"payload.utilityScripts","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Utility Scripts\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }","output":"str","x":270,"y":40,"wires":[["9f84c5ba.086818"]]},{"id":"6b8363f5.51e7ac","type":"http in","z":"fb032bb0.bba878","name":"Index","url":"/old","method":"get","upload":false,"swaggerDoc":"","x":90,"y":60,"wires":[["2ec0c48e.3215dc"]]},{"id":"801e769c.71adc8","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <h2 class=\"featurette-heading\">A Control Platform Based on IoT Technology</h2>\n            <p class='archLayerText'>\n                Control systems are everywhere - from the the thermostat in your house to nuclear power plants.\n                Blinky-Lite is flexible and powerful enough to control anything from a blinking LED to a particle accelerator. \n                What makes controls with Blinky-Lite different is:\n            </p>\n            <table>\n                <tr>\n                    <td width='75%' valign='middle'>\n                        <ul>\n                            <li class='archLayerBulletText'>\n                                Extremely reliable and robust control\n                                <ul>\n                                    <li class='archLayerText'>\n                                        Blinky-Lite is based on high performance but inexpensive IoT computing \n                                        placed <b><i>close</i></b> to the devices you want to control.\n                                    </li>\n                                </ul>\n                            </li>\n                            <li class='archLayerBulletText'>\n                                Web Accessibility\n                                <ul>\n                                    <li class='archLayerText'>\n                                        Blinky-Lite applications are web-based giving you control from anywhere in the world.\n                                    </li>\n                                </ul>\n                            </li>\n                            <li class='archLayerBulletText'>\n                                Flexibility\n                                <ul>\n                                    <li class='archLayerText'>\n                                        Blinky-Lite is 100% open source for easy customization\n                                    </li>\n                                </ul>\n                            </li>\n                            <li class='archLayerBulletText'>\n                                Easy to implement\n                                <ul>\n                                    <li class='archLayerText'>\n                                        Blinky-Lite is designed for non-experts who have beginner knowledge in Javascript. \n                                    </li>\n                               </ul>\n                            </li>\n                        </ul>\n                    </td>\n                    <td width='25%' valign='middle'>\n                        <table width='100%'>\n                            <tr>\n                                <td>\n                                    <a href='/img/homePage/demoDmaUi.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/homePage/demoDmaUi.png\">\n                                    </a>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <a href=\"/img/homePage/redDemoCircuit.jpg\" target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/homePage/redDemoCircuit.jpg\">\n                                    </a>\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n    </div>\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-12\">\n                <h2 class=\"featurette-heading\">Ready to Go</h2>\n                <p class=\"lead\">\n                    Blinky-Lite comes with\n                    <a class='link-text link-hover' href='/coreApps'>\n                        seven user web-based applications \n                    </a>\n                    out of the box.\n                </p>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <table>\n                <tr>\n                    <td width='10%' valign='middle'></td>\n                    <td width='38%' valign='middle'>\n                        <a href='img/homePage/archiveDemo.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/archiveDemo.png\" >\n                        </a>\n                    </td>\n                    <td width='42%' valign='middle'>\n                        <a href='/img/readMore/vectorArchiveBird.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/vectorArchiveBird.png\" >\n                        </a>\n                    </td>\n                    <td width='10%' valign='middle'></td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n    </div>\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <div class=\"col-md-12\">\n                <h2 class=\"featurette-heading\">Easy to Use</h2>\n                <p class=\"lead\">\n                    Almost all of the code is written with\n                    <a class='link-text link-hover' target='_blank' href='https://nodered.org/'>\n                        Node-RED \n                    </a>\n                    , a graphical programming enviroment.\n                </p>\n            </div>\n        </div>\n        <div class=\"row featurette\">\n            <table>\n                <tr>\n                    <td width='10%' valign='middle'></td>\n                    <td width='40%' valign='middle'>\n                        <a href='/img/homePage/demoDmaScreenShot.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/homePage/demoDmaScreenShot.png' >\n                        </a>\n                    </td>\n                    <td width='40%' valign='middle'>\n                        <a href=\"/img/homePage/ControlBoxNodeRed.png\" target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/homePage/ControlBoxNodeRed.png\" >\n                        </a>\n                    </td>\n                    <td width='10%' valign='middle'></td>\n                </tr>\n            </table>\n        </div>\n     </div>\n    <div class=\"container marketing\">\n        <p></p>\n        <div class=\"row featurette\">\n            <p></p>\n            <div class=\"col-md-3\"></div>\n            <div class=\"col-md-6\">\n                <a class='btn card-button btn-block' href='/readmore' >Read More</a>\n            </div>\n            <div class=\"col-md-3\"></div>\n        </div>\n    </div>","output":"str","x":970,"y":60,"wires":[["d796befa.0a69f"]]},{"id":"2b799d82.9e8062","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Blinky-Lite","output":"str","x":530,"y":60,"wires":[["d17a86d3.afc008"]]},{"id":"d796befa.0a69f","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1130,"y":60,"wires":[]},{"id":"6f2cf928.181b38","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n","output":"str","x":390,"y":60,"wires":[["2b799d82.9e8062"]]},{"id":"d17a86d3.afc008","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/BlinkyLogoSmall.png\" height=\"70px\" style='padding-right: 20px;'/>","output":"str","x":660,"y":60,"wires":[["8c25b22a.ae2b3"]]},{"id":"d8f942b1.22ee7","type":"http in","z":"fb032bb0.bba878","name":"tutorial","url":"/tutorial","method":"get","upload":false,"swaggerDoc":"","x":90,"y":500,"wires":[["e7a1a567.e7aef8"]]},{"id":"a6f52546.e6cce8","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <p class='archLayerText'>\n                    The best way to understand the Blinky-Lite architecture is to build a simple full-stack demonstration system.\n                    The demonstration system will be based on a simple device that does the following:\n                </p>\n                <ul>\n                    <li class='archLayerText'>Measures the distance to an nearby object and alarm if the object is too close</li>\n                    <li class='archLayerText'>Measure the temperature</li>\n                    <li class='archLayerText'>Measure the amount of light</li>\n                    <li class='archLayerText'>Change the state of an LED from Off, Blinking, to On both remotely via a web app and locally via push button</li> \n                </ul>\n                <p class='archLayerText'>\n                    All the drawings and source code for this tutorial can be found at \n                    <a class=\"link-text link-hover\" href=\"https://github.com/Blinky-Lite/blinky-lite-demo\" target=\"_blank\">\n                        https://github.com/Blinky-Lite/blinky-lite-demo\n                    </a>\n                    .<br>\n                    The source code for the Control Box can be found at\n                    <a class=\"link-text link-hover\" href=\"https://github.com/Blinky-Lite/blinky-lite-core\" target=\"_blank\">\n                        https://github.com/Blinky-Lite/blinky-lite-core\n                    </a>.\n                </p>\n                <table>\n                    <tr>\n                        <td width='10%' valign='middle'></td>\n                        <td width='37.5%' valign='middle'>\n                            <a href='img/homePage/greenDemoCircuit.jpg' target='_blank'>\n                                <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/greenDemoCircuit.jpg\" >\n                            </a>\n                        </td>\n                        <td width='42.5%' valign='middle'>\n                            <a href='img/homePage/demoDmaUi.png' target='_blank'>\n                                <img class=\"featurette-image img-fluid mx-auto\" src=\"img/homePage/demoDmaUi.png\">\n                            </a>\n                        </td>\n                        <td width='10%' valign='middle'></td>\n                    </tr>\n                </table>\n                <ul>\n                    <li class='archLayerBulletText'>\n                        Building the Demo circuit \n                        <button class=\"btn btn-link link-text link-hover\" id='demoCircuitButton' type=\"button\" onclick=\"topicClicked('demoCircuit')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.demoCircuit}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        Programming the Device Controller \n                        <button class=\"btn btn-link link-text link-hover\" id='deviceControllerButton' type=\"button\" onclick=\"topicClicked('deviceController')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.deviceController}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        Programming the Device Message Adapter \n                        <button class=\"btn btn-link link-text link-hover\" id='deviceMessageAdapterButton' type=\"button\" onclick=\"topicClicked('deviceMessageAdapter')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.deviceMessageAdapter}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        Setting up the Control Box Server\n                        <button class=\"btn btn-link link-text link-hover\" id='controlBoxButton' type=\"button\" onclick=\"topicClicked('controlBox')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.controlBox}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        Setting up the Customized User Application Server \n                        <button class=\"btn btn-link link-text link-hover\" id='customAppButton' type=\"button\" onclick=\"topicClicked('customApp')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.customApp}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        Setup the Raspberry Pi \n                        <button class=\"btn btn-link link-text link-hover\" id='setupRpiButton' type=\"button\" onclick=\"topicClicked('setupRpi')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.setupRpi}}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n","output":"str","x":970,"y":660,"wires":[["dead30d5.01811"]]},{"id":"122858d9.35d7a7","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Blinky-Lite Tutorial","output":"str","x":210,"y":580,"wires":[["c19a8085.3786a"]]},{"id":"dead30d5.01811","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1130,"y":660,"wires":[]},{"id":"5d4b6124.3f935","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n        var numTopics = -1;\n        var topicVisibile = [];\n        var topics = ['setupRpi','setupDI','connectRpi', 'setupNodejs','setupMQTT','setupMongoDB', 'demoCircuit', 'deviceController', 'deviceMessageAdapter', 'controlBox', 'customApp'];\n        $( document ).ready(function()\n        {\n            numTopics = topics.length;\n            for (var ii = 0; ii < numTopics; ++ii)\n            {\n                $('#' + topics[ii]).hide();\n                topicVisibile[ii] = false;\n            }\n        });\n        function getTopicIndex(topic)\n        {\n            var itopic = -1;\n            for (var ii = 0; ii < numTopics; ++ii)\n            {\n                if (topic == topics[ii])\n                {\n                    itopic = ii;\n                    ii = numTopics;\n                }\n            }\n            return itopic;\n        }\n        function topicClicked(topic)\n        {\n            var itopic = getTopicIndex(topic);\n            if (topicVisibile[itopic])\n            {\n                $('#' + topics[itopic]).hide();\n                $('#' + topics[itopic] + 'Button').html(' (learn more)');\n                topicVisibile[itopic] = false;\n            }\n            else\n            {\n                $('#' + topics[itopic]).show();\n                $('#' + topics[itopic] + 'Button').html(' (show less)');\n                topicVisibile[itopic] = true;\n            }\n        }\n","output":"str","x":230,"y":540,"wires":[["122858d9.35d7a7"]]},{"id":"c19a8085.3786a","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- appicon -->\n                    <img src=\"/img/bookYellow.png\" height=\"70px\"  style='padding-right: 20px;'/>","output":"str","x":220,"y":620,"wires":[["585f01b.76936"]]},{"id":"585f01b.76936","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- jumbotronExtras -->\n    <table width='100%'>\n        <tr>\n            <td align='left'>\n            </td>\n            <td align='center'>\n            </td>\n            <td align='right'>\n                <a href='/readmore' style='color: white;text-decoration:underline;'>Read More</a>\n            </td>\n        </tr>\n    </table> \n","output":"str","x":240,"y":660,"wires":[["80f7cb74.014058"]]},{"id":"8c25b22a.ae2b3","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"    <table width='100%'>\n        <tr>\n            <td align='left'>\n                <a href='/readmore' style='color: white;text-decoration:underline;'>Read More</a>\n            </td>\n            <td align='center'>\n                <h2 style=\"text-align: center; color:--container-title-color;\">Controls for humans</h2>                \n            </td>\n            <td align='right'>\n                <a href='/tutorial' style='color: white;text-decoration:underline;'>Learn How</a>\n            </td>\n        </tr>\n    </table> \n","output":"str","x":820,"y":60,"wires":[["801e769c.71adc8"]]},{"id":"50fbeb43.7d5fc4","type":"http in","z":"fb032bb0.bba878","name":"readmore","url":"/readmore","method":"get","upload":false,"swaggerDoc":"","x":100,"y":120,"wires":[["c46aa9a2.581038"]]},{"id":"ecc79992.f96468","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <p class='lead'>The Blinky-Lite architecture is like an orchestra concert.</p>\n                <table>\n                    <tr>\n                        <td width='40%' valign='top' align='center'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/orchestra.png\">\n                        </td>\n                        <td width='60%' valign='middle'>\n                            <a href='/img/readMore/architecture.png' target='_blank'>\n                                <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/architecture.png\" >\n                            </a>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n        <p></p>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <ul>\n                    <li class='archLayerBulletText'>\n                        The user interface as the audience. \n                        <button class=\"btn btn-link link-text link-hover\" id='userInterfaceButton' type=\"button\" onclick=\"topicClicked('userInterface')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.userInterface}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The control box as the conductor. \n                        <button class=\"btn btn-link link-text link-hover\" id='controlBoxButton' type=\"button\" onclick=\"topicClicked('controlBox')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.controlBox}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The device message adapter as the musician.\n                         <button class=\"btn btn-link link-text link-hover\" id='deviceMessageAdapterButton' type=\"button\" onclick=\"topicClicked('deviceMessageAdapter')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.deviceMessageAdapter}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The device controller as the musician's hand.\n                        <button class=\"btn btn-link link-text link-hover\" id='deviceControllerButton' type=\"button\" onclick=\"topicClicked('deviceController')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.deviceController}}}\n                    </li>\n                    <li class='archLayerBulletText'>\n                        The device as the musical instrument. \n                        <button class=\"btn btn-link link-text link-hover\" id='deviceButton' type=\"button\" onclick=\"topicClicked('device')\" style='text-align:center;'>\n                            (learn more)\n                        </button>\n{{{payload.device}}}\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <p></p>\n        <div class=\"row featurette\">\n            <div class=\"col-md-3\"></div>\n            <div class=\"col-md-6\">\n                <a class='btn card-button btn-block' href='/tutorial' >Learn How</a>\n            </div>\n            <div class=\"col-md-3\"></div>\n        </div>\n    </div>\n","output":"str","x":1170,"y":440,"wires":[["769be711.a615b8"]]},{"id":"12d2595e.ca18f7","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Blinky-Lite Architecture","output":"str","x":550,"y":120,"wires":[["d2eb1507.76c958"]]},{"id":"769be711.a615b8","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":1310,"y":440,"wires":[]},{"id":"27d40088.1345e","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n        var numTopics = -1;\n        var topicVisibile = [];\n        var topics = ['device', 'deviceController', 'deviceMessageAdapter', 'controlBox', 'userInterface', 'mqttBroker', 'mongoDB', 'coreAppServer', 'customAppServer'];\n        $( document ).ready(function()\n        {\n            numTopics = topics.length;\n            for (var ii = 0; ii < numTopics; ++ii)\n            {\n                $('#' + topics[ii]).hide();\n                topicVisibile[ii] = false;\n            }\n        });\n        function getTopicIndex(topic)\n        {\n            var itopic = -1;\n            for (var ii = 0; ii < numTopics; ++ii)\n            {\n                if (topic == topics[ii])\n                {\n                    itopic = ii;\n                    ii = numTopics;\n                }\n            }\n            return itopic;\n        }\n        function topicClicked(topic)\n        {\n            var itopic = getTopicIndex(topic);\n            if (topicVisibile[itopic])\n            {\n                $('#' + topics[itopic]).hide();\n                $('#' + topics[itopic] + 'Button').html(' (learn more)');\n                topicVisibile[itopic] = false;\n            }\n            else\n            {\n                $('#' + topics[itopic]).show();\n                $('#' + topics[itopic] + 'Button').html(' (show less)');\n                topicVisibile[itopic] = true;\n            }\n        }\n","output":"str","x":410,"y":120,"wires":[["12d2595e.ca18f7"]]},{"id":"d2eb1507.76c958","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- appicon -->\n                    <img src=\"/img/glassesYellow.png\" height=\"70px\"  style='padding-right: 20px;'/>","output":"str","x":680,"y":120,"wires":[["39f8119a.55054e"]]},{"id":"39f8119a.55054e","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- jumbotronExtras -->\n    <table width='100%'>\n        <tr>\n            <td align='left'>\n            </td>\n            <td align='center'>\n            </td>\n            <td align='right'>\n                <a href='/tutorial' style='color: white;text-decoration:underline;'>Learn How</a>\n            </td>\n        </tr>\n    </table> \n","output":"str","x":840,"y":120,"wires":[["b59b0601.677288"]]},{"id":"b59b0601.677288","type":"template","z":"fb032bb0.bba878","name":"device","field":"payload.device","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- device -->\n                        <div id='device' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                A device can be any detector or actuator that has an electrical interface. \n                                Common devices are LEDs, switches, temperature probes, ultrasound transducers and receivers, etc. \n                                The IoT revolution has brought an  \n                                <a class='link-text link-hover' target='_blank' href='https://www.postscapes.com/trackers/video/the-internet-of-things-and-sensors-and-actuators/'>\n                                    explosion\n                                </a> \n                                of such devices. Devices can also be more complicated such as an oscilloscope with a programmable interface (USB, ethernet, serial,...)    \n                            </p>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('device')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":990,"y":120,"wires":[["d922349.1ccf4c8"]]},{"id":"c46aa9a2.581038","type":"template","z":"fb032bb0.bba878","name":"custom.css","field":"payload.custom.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        .archLayerBulletText\n        {\n          color: var(--container-background-color);\n          font-weight: bold;\n          font-size: large;\n        }\n        .archLayerText\n        {\n          color: var(--background-text);\n          font-weight: normal;\n          font-size: large;\n        }\n        .readMoreDiv\n        {\n            border-style: solid;\n            border-width: 2px;\n            border-color: var(--background-text);\n        }\n","output":"str","x":250,"y":120,"wires":[["27d40088.1345e"]]},{"id":"d922349.1ccf4c8","type":"template","z":"fb032bb0.bba878","name":"deviceController","field":"payload.deviceController","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- deviceController -->\n                        <div id='deviceController' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                The device controller conditions the signals to and from the device such as digitizing voltages, \n                                providing and digital and analog output signals, etc. \n                                The device controller is usually micro-controller such as an \n                                <a class='link-text link-hover' target='_blank' href='https://www.arduino.cc/'>\n                                    Arduino        \n                                </a> \n                                board. (However, many Blinky-Lite projects are done with the \n                                 <a class='link-text link-hover' target='_blank' href='https://www.pjrc.com/teensy/'>\n                                    Teensy\n                                </a> \n                                family of boards because they provide a very low cost but high performance platform.)\n                            </p>\n                            <p class='archLayerText'>\n                                These microcontrollers are the swiss army knife of signal conditioning. \n                                They provide digitizing channels, digital status, pulse width modulation, and analog and digital outputs, but they are also very easy to use. \n                                The user communicates serially to the boards over a USB interface and the boards are programmed in C/C++ using the \n                                <a class='link-text link-hover' target='_blank' href='https://www.arduino.cc/en/Main/Software'>\n                                    Arduino programming enviroment (IDE)\n                                </a>\n                                . Many IoT vendors such as \n                                <a  class='link-text link-hover' target='_blank' href='https://www.adafruit.com/'>\n                                    AdaFruit\n                                </a> \n                                and \n                                <a class='link-text link-hover' target='_blank' href='https://www.sparkfun.com/'>\n                                    SparkFun\n                                </a> \n                                provide libraries for their devices along \n                                with step-by-step instructions on how to add these libraries to the Arduino IDE. \n                                The Arduino organization has provided an excellent \n                                <a class='link-text link-hover' target='_blank' href='https://www.arduino.cc/en/Main/Education'>\n                                    set of tutorials\n                                </a> \n                                with basic lessons on IoT electronics and how to program the controllers.\n                            </p>\n                            <p class='archLayerText'>\n                                In addition to the USB serial interface, these microcontroller boards have a number of additional two-wire serial communication channels. \n                                Blinky-Lite uses one of these channels to communicate with the Device Message Adapter. \n                                As demonstrated in the \n                                <a class='link-text link-hover' href='/tutorial'>\n                                    Blinky-Lite Tutorial\n                                </a> \n                                the communication uses binary buffers which provides simple, high speed and robust communication.\n                            </p>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('deviceController')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":1020,"y":160,"wires":[["49662d5e.468944"]]},{"id":"49662d5e.468944","type":"template","z":"fb032bb0.bba878","name":"deviceMessageAdapter","field":"payload.deviceMessageAdapter","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- deviceMessageAdapter -->\n                        <div id='deviceMessageAdapter' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                The device message adapter transmits and receives communication to and from the control box via MQTT messages as described in the Control Box description. \n                                The device message adapter than translates and transmits this information to the device controller over the serial port between the device controller and the device message adapter. \n                                There can be many device message adapters in a control system and in turn, a device message adapter can communicate with several device controllers. \n                            </p>\n                            <p class='archLayerText'>\n                                This flexibility provides for local autonomous control. \n                                For example a single device message adapter could be located in a house to control the temperature of the house. \n                                The devices would be some type of thermometer and another device a switch to turn on and off the furnace. \n                                The device message adapter would regulate the temperature in the house based on a set point that was communicated to it from the control box. \n                                In turn the device message adapter could update the control box (and hence the user) on the status of the house. \n                                If communication between the device message adapter and the control box was to be interrupted, the device message adapter would continue to keep the house at the temperature it was last instructed.\n                            </p>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('deviceMessageAdapter')\" style='text-align:center;'>(show less)</button>\n                        </div>","output":"str","x":1050,"y":200,"wires":[["718cab78.0afa14"]]},{"id":"c8ad797e.a40d58","type":"template","z":"fb032bb0.bba878","name":"controlBox","field":"payload.controlBox","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- controlBox -->\n                        <div id='controlBox' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                The control box is the heart of the Blinky-Lite architecture. \n                                The typical Blinky-Lite control box is a \n                                <a class='link-text link-hover' target='_blank' href='https://www.raspberrypi.org/products/'>Raspberry Pi 3B </a>\n                                computer.  The Raspberry Pi 3B is a low cost, high performance computer that has ethernet, Wifi, and bluetooth communications. The \n                                <a class='link-text link-hover' target='_blank' href='/tutorial'>Blinky-Lite tutorial </a>\n                                provides instructions on how to setup the Raspberry Pi or disk images that have the Blinky-Lite already installed.  \n                            </p>\n                            <p class='archLayerText'>\n                                The control box has four major components:\n                            </p>\n                            <ul>\n                                <li class='archLayerBulletText'>\n                                    MQTT broker\n                                    <button class=\"btn btn-link link-text link-hover\" id='mqttBrokerButton' type=\"button\" onclick=\"topicClicked('mqttBroker')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.controlbox.mqttBroker}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    MongoDB Database\n                                    <button class=\"btn btn-link link-text link-hover\" id='mongoDBButton' type=\"button\" onclick=\"topicClicked('mongoDB')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.controlbox.mongoDB}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    Core app server\n                                    <button class=\"btn btn-link link-text link-hover\" id='coreAppServerButton' type=\"button\" onclick=\"topicClicked('coreAppServer')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.controlbox.coreAppServer}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    Custom app server\n                                    <button class=\"btn btn-link link-text link-hover\" id='customAppServerButton' type=\"button\" onclick=\"topicClicked('customAppServer')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.controlbox.customAppServer}}}\n                                </li>\n                            </ul>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('controlBox')\" style='text-align:center;'>(show less)</button>\n                        </div>","output":"str","x":1010,"y":400,"wires":[["1573ea5d.99fd16"]]},{"id":"1573ea5d.99fd16","type":"template","z":"fb032bb0.bba878","name":"userInterface","field":"payload.userInterface","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- userInterface -->\n                        <div id='userInterface' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                Applications for control and monitoring of the devices must be available to the user. \n                                Blinky-Lite uses web applications for these type of applications. \n                                Modern web browsers provide powerful plotting and graphical environments. \n                                A web applications is a much better way to control deployment for these applications. \n                                The web applications communicate with the server using \n                                <a class='link-text link-hover' target='_blank' href='https://en.wikipedia.org/wiki/WebSocket'>\n                                    websockets\n                                </a> \n                                which allow real-time communication among different clients connected to a server.\n                            </p>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('userInterface')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":1010,"y":440,"wires":[["ecc79992.f96468"]]},{"id":"e7a1a567.e7aef8","type":"template","z":"fb032bb0.bba878","name":"custom.css","field":"payload.custom.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        .archLayerBulletText\n        {\n          color: var(--container-background-color);\n          font-weight: bold;\n          font-size: large;\n        }\n        .archLayerText\n        {\n          color: var(--background-text);\n          font-weight: normal;\n          font-size: large;\n        }\n        .readMoreDiv\n        {\n            border-style: solid;\n            border-width: 1px;\n            border-color: var(--background-text);\n        }\n        .partsTable\n        {\n          color: black;\n          font-weight: normal;\n          font-size: x-small;\n          border: 1px solid black;\n        }\n","output":"str","x":230,"y":500,"wires":[["5d4b6124.3f935"]]},{"id":"80f7cb74.014058","type":"template","z":"fb032bb0.bba878","name":"setupRpi.setupDI","field":"payload.setupRpi.setupDI","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- setupRpi.setupDI -->\n                                    <div id='setupDI' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            On Linux desktop computer, download the latest Raspberry Pi image at: \n                                            <a class=\"link-text link-hover\" href=\"https://downloads.raspberrypi.org/raspbian_latest\" target=\"_blank\">\n                                                https://downloads.raspberrypi.org/raspbian_latest\n                                            </a> \n                                            The downloaded file will have a name like <b>YYYY-MM-DD-raspbian-stretch.zip</b> \n                                            Where YYYY-MM-DD is the year, month, and date of the release. \n                                            Change directory to the location of the downloaded file and unzip it:\n                                        </p>\n                                        <code>unzip YYYY-MM-DD-raspbian-stretch.zip</code><br>\n                                        <p class='archLayerText'>\n                                            Before you insert an SD card into your computer identify the names of the drives on your computer by typing:\n                                        </p>\n                                        <code>df -h </code><br>\n                                        <p class='archLayerText'>You will see something similar to the screenshot below:</p>\n                                        <p class='archLayerText'><img class=\"img-max\" src=\"/img/tutorial/screenBeforeSD.png\" width=\"95%\"></p>\n                                        <p class='archLayerText'>Now, insert an 8GB (or greater) SD card into your computer. Type:</p>\n                                        <code>df -h</code><br>\n                                        <p class='archLayerText'>to determine the name of the SD card</p>\n                                        <p class='archLayerText'><img class=\"img-max\" src=\"/img/tutorial/screenAfterSD.png\" width=\"95%\"></p>\n                                        <p class='archLayerText'>In this example the name of the SD card is mmcblk0  (p1 is the partition). Copy the disk image to the SD card</p>\n                                        <code>sudo dd if=<b><i>YYYY-MM-DD</i></b>-raspbian-stretch.img of=/dev/<b><i>SD-CARD-NAME </i></b>bs=1M</code><br>\n                                        <p class='archLayerText'>\n                                            Where in this example <b><i>SD-CARD-NAME </i></b>is mmcblk0. \n                                            Once the disk copy is complete, eject the disk and re-insert the disk. \n                                            You should see two partitions show up on your linux desktop. \n                                            The RaspberryPi image now comes with SSH disabled. \n                                            To enable it, open the boot partition of the sd card and create a file named ssh. \n                                            From a linux terminal on your desktop computer enter:\n                                        </p>\n                                        <code>sudo nano /media/$USER/boot/ssh</code><br>\n                                        <p class='archLayerText'>\n                                            Type a couple of characters and save <i>(cntrl-x). </i>For the <b>Raspberry Pi Zero</b>\n                                            , there is no ethernet connection so you need to give it the information to connect to your wireless network. \n                                            Edit the <b>wpa_supplicant.conf</b> file  on the rootfs partition of the sd card. \n                                            From a linux terminal on your desktop computer enter:\n                                        </p>\n                                        <code>sudo nano /media/$USER/rootfs/etc/wpa_supplicant/wpa_supplicant.conf</code><br>\n                                        <p class='archLayerText'>\n                                            Add the following lines to the file where <b><i>country-abbrev</i></b>\n                                            is your contry abbreviation (for example in Sweden it is SE), <b><i>your-wireless-ssid</i></b>\n                                            is your wireless ssid and <b><i>your-wireless-ssid-password</i></b>is your wireless ssid password\n                                        </p>\n                                        <code>\n                                            country=<b><i>country-abbrev</i></b>\n                                            <br>\n                                            <br>\n                                            network={<br>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;ssid=\"<b><i>your-wireless-ssid</i></b>\n                                            \"<br>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;psk=\"<b><i>your-wireless-ssid-password</i></b>\"\n                                            <br>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;key_mgmt=WPA-PSK\n                                            <br>\n                                            }\n                                        </code><br>\n                                        <p class='archLayerText'>and save <i>(cntrl-x).</i></p>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('setupDI')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":470,"y":500,"wires":[["9d67b7bc.35a598"]]},{"id":"9d67b7bc.35a598","type":"template","z":"fb032bb0.bba878","name":"setupRpi.connectRpi","field":"payload.setupRpi.connectRpi","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- setupRpi.connectRpi -->\n                                    <div id='connectRpi' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            Eject the sd card and place it into the Raspberry-Pi. \n                                            Connect the Raspberry Pi with an ethernet cable to your router and then power up the raspberry pi. \n                                            Open a linux terminal and ssh into the RaspberryPi:\n                                        </p>    \n                                        <code>ssh pi@raspberrypi.local</code><br>\n                                        <p class='archLayerText'>\n                                            The default password for the Raspberry-Pi is <b><i>raspberry  </i></b>. \n                                            We will want to change this immediately. \n                                            Now configure the Raspberry-Pi by running the configuration program:\n                                        </p>\n                                        <code>sudo raspi-config</code><br>\n                                        <p class='archLayerText'>\n                                            The <b>raspi-config </b>program looks as below:\n                                        </p>\n                                         <p class='archLayerText'>\n                                            <img class=\"img-max\" src=\"/img/tutorial/raspi_config.png\" width=\"95%\">\n                                        </p>\n                                        <ul>\n                                            <li class='archLayerText'>First change the password - Menu Iterm 1</li>\n                                            <li class='archLayerText'>Under Menu Item 2, change the hostname. Do not set up the wifi, we will do that later</li>\n                                            <li class='archLayerText'>Under Item 5, Enable both SSH (P2) and VNC (P3). We will need VNC later</li>\n                                            <li class='archLayerText'>\n                                                Under Item 7, set the screen resolution (for the VNC server)  - Choice A5. I prefer\n                                                <b><i>DMT Mode 35 1280x1024 60Hz 5:4</i></b>\n                                            </li>\n                                            <li class='archLayerText'>Under Item 7, Expand the file system - Choice A1</li>\n                                            <li class='archLayerText'>\n                                                Under Item 5, Serial Port (P6) select <b>No </b>\n                                                for <i>Would you like a login shell to be accessible over serial?</i>Select <b>Yes </b>\n                                                for <i>Would you like the serial port hardware to be enabled?</i>\n                                            </li>\n                                        </ul>\n                                        <p class='archLayerText'>You should get an screen lookin as the following:</p>\n                                        <p class='archLayerText'><img class=\"img-max\" src=\"/img/tutorial/raspi-config-serial.png\" width=\"95%\"></p>\n                                        <p class='archLayerText'>\n                                            Using the arrow keys navigate to <b>Finish </b>to exit the configuration program and reboot the RaspberryPi\n                                        </p>\n                                        <p class='archLayerText'>\n                                            On your linux Desktop, download the RealVNC Viewer at \n                                            <a class=\"link-text link-hover\" href=\"https://www.realvnc.com/en/connect/download/viewer/linux/\" target=\"_blank\">\n                                                https://www.realvnc.com/en/connect/download/viewer/linux/\n                                            </a>\n                                        </p>\n                                        <p class='archLayerText'>\n                                            We will now connect to the RaspberryPi desktop. \n                                            It is easy to finish the rest of the configuration from the RaspberryPi Desktop \n                                            and the VNC Viewer will allow you to run programs such as the Arduino \n                                            programing environment on the RaspberryPi.\n                                        </p>\n                                        <ul>\n                                            <li class='archLayerText'>\n                                                Open the VNC viewer and make a New Connection under the File menu. \n                                                Change the VNC server to: <b><i>hostname.local:5900 </i></b>\n                                                where hostname is what you entered in Item 2 of the raspi-config program. \n                                            </li>\n                                            <li class='archLayerText'>Close the new connection dialog and double click on your new connection in the VNC Viewer window. </li>\n                                            <li class='archLayerText'>The VNC viewer should connect to the RaspberryPi. At first it will warn you of an identity check. Just click continue. </li>\n                                            <li class='archLayerText'>Next you will be asked for a username and password. The username is pi. The password is the password you entered in Item 2 of the raspi-config program.</li>\n                                        </ul>\n                                        <p class='archLayerText'>You should see a window as below:</p>\n                                        <p class='archLayerText'><img class=\"img-max\" src=\"/img/tutorial/raspiDesktop.png\" width=\"95%\"></p>\n                                        <p class='archLayerText'>\n                                            The wireless connection can be setup by clicking on the Up-Down arrow icon in the upper righthand corner of the desktop. \n                                            A nice GUI version of the configuration program can be found under the Preferences sub-menu of Raspberry menu.\n                                        </p>\n                                        <p class='archLayerText'><img class=\"img-max\" src=\"/img/tutorial/raspiDesktopConfig.png\"></p>\n                                        <p class='archLayerText'>\n                                            Open the GUI raspi-config program and under the Localisation tab, set the Locale, Timezone, and Keyboard. \n                                            The RaspberryPi will have to be booted for these changes to take effect.\n                                        </p>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('connectRpi')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":480,"y":540,"wires":[["aca41f64.c2179"]]},{"id":"aca41f64.c2179","type":"template","z":"fb032bb0.bba878","name":"setupRpi.setupNodejs","field":"payload.setupRpi.setupNodejs","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- setupRpi.setupNodejs -->\n                                    <div id='setupNodejs' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            The RaspberryPi comes with very old versions of node.js and npm installed. In this section we will update node.js and npm. \n                                            From your linux desktop, ssh into the RaspberryPi\n                                        </p>\n                                        <code>ssh pi@hostname.local</code><br>\n                                        <p class='archLayerText'>\n                                            Where <b><i>hostname </i></b>\n                                            is what you entered in Item 2 of the raspi-config program. Check the version of node:\n                                        </p>\n                                        <code>node -v</code><br>\n                                        <p class='archLayerText'>\n                                            As of 2018-04-18 release, the RaspberryPi ships with node.js at v4.8.2. \n                                            To upgrade, check the hardware on your RaspberryPi.\n                                        </p>\n                                        <code>uname -a</code><br>\n                                        <p class='archLayerText'>\n                                            A <b>RaspberryPi 3 </b>runs an ARM7 processor while a <b>RaspberryPi </b>\n                                            Zero runs  an ARM6 processor. For easier cleanup later, on the ssh session you are running to \n                                            connect to the RaspberryPi, change the directory to the Download directory:\n                                        </p>\n                                        <code>cd ~/Downloads</code><br>\n                                        <p class='archLayerText'>\n                                            In a browser go to the nodejs download page at: \n                                            <a class=\"link-text link-hover\" href=\"https://nodejs.org/en/download/\" target=\"_blank\">\n                                                https://nodejs.org/en/download/\n                                            </a>\n                                            The Node.js download page will look as below:\n                                        </p>\n                                        <p class='archLayerText'>\n                                            <img class=\"img-max\" src=\"/img/tutorial/nodejsDownload.png\" width=\"95%\">\n                                        </p>\n                                        <p class='archLayerText'>\n                                            Find the linux binary  distribution that matches your RaspberryPi hardware (most likely ARMv7). '\n                                            Copy the link location and in the ssh terminal type:\n                                        </p>\n                                        <code>wget https://nodejs.org/dist/vX.YY.Z/node-vX.YY.Z-linux-armv7l.tar.xz</code><br>\n                                        <p class='archLayerText'>\n                                            Where <b><i>vX.YY.Z </i></b>is current release of node.js. Then, unzip the file:\n                                        </p>\n                                        <code>tar -xf node-<b><i>vX.YY.Z</i> </b>-linux-armv7l.tar.xz</code><br>\n                                        <p class='archLayerText'>Navigate into the unzipped directory:</p>\n                                        <code>cd node-<b><i>vX.YY.Z</i></b>-linux-armv7l</code><br>\n                                        <p class='archLayerText'>And copy the files to the <b><i>/usr/ </i></b>directory by:</p>\n                                        <code>sudo cp -R * /usr/</code><br>\n                                        <p class='archLayerText'>Now check the version of node.js by:</p>\n                                        <code>node -v</code><br>\n                                        <p class='archLayerText'>and:</p>\n                                        <code>npm -v</code><br>\n                                        <p class='archLayerText'>\n                                            You should see a node version that matches <b><i>vX.YY.Z </i></b>and an npm version greater than 5.5.\n                                            You can now delete all the items in the RaspberryPi download directory:\n                                        </p>\n                                        <code>rm -rf ~/Downloads/*</code><br>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('setupNodejs')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":480,"y":580,"wires":[["a689a9e2.686168"]]},{"id":"a689a9e2.686168","type":"template","z":"fb032bb0.bba878","name":"setupRpi.setupMQTT","field":"payload.setupRpi.setupMQTT","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- setupRpi.setupMQTT -->\n                                    <div id='setupMQTT' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            <i>\n                                                Note: Only the Blinky-Lite Core Raspberry Pi needs to have a MQTT broker installed. \n                                                Blinky-Lite device message adapters do not require a MQTT broker.\n                                            </i>\n                                            Their are many open source MQTT brokers \n                                            <a class=\"link-text link-hover\" href=\"https://diyprojects.io/mqtt-mosquitto-communicating-connected-objects-iot/\" target=\"_blank\">\n                                                available \n                                            </a>\n                                            but Blinky-Lite will use Mosquitto supported by the \n                                            <a class=\"link-text link-hover\" href=\"http://iot.eclipse.org/\" target=\"_blank\">\n                                                Eclipse Foundation. \n                                            </a>\n                                            Open a terminal session into your Raspberry-Pi either through an ssh session from your Linux desktop RealVNC  Connection. \n                                            Once you have a terminal session running on your Raspberry-Pi, install Mosquitto by typing:\n                                        </p>\n                                        <code>sudo apt-get install mosquitto</code><br>\n                                        <p class='archLayerText'>\n                                            To run tests on your Raspberry, using  mosquitto_sub clients (to subscribe),mosquitto_pub (to post messages) \n                                            and mosquitto_passwd (to set up users and passwords) enter:\n                                        </p>\n                                        <code>sudo apt-get install mosquitto-clients</code><br>\n                                        <p class='archLayerText'>\n                                            Then edit the mosquitto configuration file\n                                        </p>\n                                        <code>sudo nano /etc/mosquitto/mosquitto.conf</code><br>\n                                        <p class='archLayerText'>\n                                            by addingto the bottom of the file:\n                                        </p>\n                                        <code>\n                                            allow_anonymous false<br>\n                                            password_file /etc/mosquitto/pwfile\n                                        </code><br>\n                                        <p class='archLayerText'>\n                                            and save and exit (<i>Ctrl-x</i>). Now setup the password for the MQTT broker:\n                                        </p>\n                                        <code>sudo mosquitto_passwd -c /etc/mosquitto/pwfile <i>broker-name</i></code><br>\n                                        <p class='archLayerText'>\n                                            I usually choose the hostname of the Raspberry-Pi as the broker name. \n                                            The program will ask you for the a password for your broker. \n                                            After you have chosen the password, reboot your Raspberry-Pi:\n                                        </p>\n                                        <code>sudo reboot</code><br>\n                                        <p class='archLayerText'>\n                                            The Mosquitto MQTT broker should start on boot. When the Raspberry-Pi comes back up, \n                                            login and check that the MQTT broker is running by typing at the terminal:</p>\n                                        <code>ps -aux | grep mosquitto</code><br>\n                                        <p class='archLayerText'>\n                                            You should see an output looking something like:\n                                        </p>\n                                        <code>mosquit+ 302 0.3 1.0 8228 4500 ?     S  07:41 0:00 /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf</code><br>\n                                        <p class='archLayerText'>\n                                            But the process numbers will be different. Now test the MQTT broker by subscribing to a topic:\n                                        </p>\n                                        <code>mosquitto_sub -h 127.0.0.1  -t chit/chat -u <i>broker-name </i>-P <i>broker-password</i></code><br>\n                                        <p class='archLayerText'>\n                                            where:\n                                        </p>\n                                        <ul>\n                                            <li class='archLayerText'>\n                                                <b>-h </b>is the IP address of the broker (which is 127.0.0.1 right now since we are testing the example locally on the broker). \n                                            </li>\n                                            <li class='archLayerText'>\n                                                <b>-t </b>is the topic you wish to subscribe to (chit/chat in this example)\n                                            </li>\n                                            <li class='archLayerText'>\n                                                <b>-u </b>is the broker name you chose for the MQTT broker previously\n                                            </li>\n                                            <li class='archLayerText'>\n                                                <b>-P </b>is the password of the MQTT broker\n                                            </li>\n                                        </ul>\n                                        <p class='archLayerText'>\n                                            The program will now wait for messages. In another terminal window, login to the Raspberry-Pi and enter:\n                                        </p>\n                                        <code>mosquitto_pub -h 127.0.0.1 -t chit/chat -m \"Hi There\" -u <i>broker-name </i>-P <i>broker-password</i></code><br>\n                                        <p class='archLayerText'>\n                                            Where -m is the message you would like to send to the broker (“Hi There” in this example). \n                                            You should see in the terminal running mosquitto_sub the message echoed. \n                                            Congratulations! You now have a function MQTT broker. You can exit the mosquitto_sub program by typing <i>ctrl-c</i>\n                                        </p>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('setupMQTT')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":480,"y":620,"wires":[["5dad4459.e9366c"]]},{"id":"9e389d9f.b54de","type":"template","z":"fb032bb0.bba878","name":"setupRpi","field":"payload.setupRpi","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- setupRpi -->\n                        <div id='setupRpi' class='readMoreDiv'>\n                            <ul>\n                                <li class='archLayerBulletText'>\n                                    Setting up the disk image \n                                    <button class=\"btn btn-link link-text link-hover\" id='setupDIButton' type=\"button\" onclick=\"topicClicked('setupDI')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n {{{payload.setupRpi.setupDI}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    Connecting to the Raspberry-Pi\n                                    <button class=\"btn btn-link link-text link-hover\" id='connectRpiButton' type=\"button\" onclick=\"topicClicked('connectRpi')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.setupRpi.connectRpi}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    Setting up node.js \n                                    <button class=\"btn btn-link link-text link-hover\" id='setupNodejsButton' type=\"button\" onclick=\"topicClicked('setupNodejs')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.setupRpi.setupNodejs}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    Installing an MQTT Broker \n                                    <button class=\"btn btn-link link-text link-hover\" id='setupMQTTButton' type=\"button\" onclick=\"topicClicked('setupMQTT')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.setupRpi.setupMQTT}}}\n                                </li>\n                                <li class='archLayerBulletText'>\n                                    Installing an MongoDB \n                                    <button class=\"btn btn-link link-text link-hover\" id='setupMongoDBButton' type=\"button\" onclick=\"topicClicked('setupMongoDB')\" style='text-align:center;'>\n                                        (learn more)\n                                    </button>\n{{{payload.setupRpi.setupMongoDB}}}\n                                </li>\n                            </ul>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('setupRpi')\" style='text-align:center;'>(show less)</button>\n                        </div>","output":"str","x":540,"y":700,"wires":[["419d5323.7ef3ac"]]},{"id":"5dad4459.e9366c","type":"template","z":"fb032bb0.bba878","name":"setupRpi.setupMongoDB","field":"payload.setupRpi.setupMongoDB","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- setupRpi.setupMongoDB -->\n                                    <div id='setupMongoDB' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            <i>\n                                                Note: Only the Blinky-Lite Core Raspberry Pi needs to have MongoDB installed. \n                                                Blinky-Lite device message adapters do not require MongoDB.\n                                            </i>\n                                        </p>\n                                        <p class='archLayerText'>\n                                            Open a terminal session into your Raspberry-Pi either through an ssh session from your Linux desktop RealVNC  Connection. \n                                            Once you have a terminal session running on your Raspberry-Pi, install MongoDB by typing:\n                                        </p>\n                                        <code>\n                                            sudo apt-get install mongodb-server<br>\n                                            sudo service mongod start<br>\n                                            sudo reboot\n                                        </code><br>\n                                        <p class='archLayerText'>\n                                            MongoDB should start on boot. When the Raspberry-Pi comes back up, \n                                            login and check that MongoDB is running by typing at the terminal:</p>\n                                        <code>ps -aux | grep mongodb</code><br>\n                                        <p class='archLayerText'>\n                                            You should see an output looking something like:\n                                        </p>\n                                        <code>mongodb    276  4.6  5.3 817796 50804 ?        Ssl  May10 603:57 /usr/bin/mongod --config /etc/mongodb.conf</code><br>\n                                        <p class='archLayerText'>\n                                            But the process numbers and date will be different.\n                                        </p>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('setupMongoDB')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":490,"y":660,"wires":[["9e389d9f.b54de"]]},{"id":"718cab78.0afa14","type":"template","z":"fb032bb0.bba878","name":"controlbox.mqttBroker","field":"payload.controlbox.mqttBroker","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- controlbox.mqttBroker -->\n                                    <div id='mqttBroker' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            <a class='link-text link-hover' target='_blank' href='http://mqtt.org/'>MQTT </a> \n                                            is a very popular IoT communication protocol that was invented by IBM in 1999 \n                                            for connecting oil pipelines over satellite connection and is now an open source platform. \n                                            MQTT is designed to be reliable, data-agnostic, and lightweight and is quickly becoming the protocol of choice for IoT. \n                                        </p>\n                                        <p class='archLayerText'>\n                                            MQTT messages consist of a topic and payload. \n                                            The topic is a hierarchical character string with the hierarchy defined by forward slashes. \n                                            This hierarchy allows for the use of wildcards. \n                                            For example, let’s say that there are many buildings providing temperature readings to a MQTT broker.  \n                                            Some of these buildings could be homes, others are factories; all with different locations. \n                                            By putting the building type and address in the topic, one could subscribe to temperature readings only homes in a given area. \n                                        </p>\n                                        <p class='archLayerText'>\n                                            The MQTT payload can be anything from a text string, to a number to an image. \n                                            The user just has to know ahead of time what the format of the data will be. Blinky-Lite uses \n                                            <a class='link-text link-hover' target='_blank' href='https://www.json.org/'>JSON </a>\n                                            strings  which is a very compact and readable way of writing data.\n                                        </p>\n                                        <p class='archLayerText'>\n                                            Users keep an open connection to the MQTT broker and subscribe or publish to topics. \n                                            If a user is subscribing to given topic and another user publishes a payload to that topic \n                                            than the first user will receive a notification that a new payload is  available for the topic. \n                                            This eliminates the need for polling and provides a buffer to keep a device from being overloaded with too many requests. \n                                        </p>\n                                        <p class='archLayerText'>\n                                            For example, assume a single device is measuring a temperature but there are over a 1000 users that want to know this temperature. \n                                            In a conventional distributed system, each user would make a request to the device for the temperature value. \n                                            If each user wants to know the temperature as a function of time, then each user must poll the device periodically for the temperature value. \n                                            With so many users, this could easily overwhelm the device providing the temperature reading.\n                                        </p>\n                                        <p class='archLayerText'>\n                                            With Blinky-Lite and MQTT, the device publishes the temperature to the broker when the device is ready \n                                            (i.e. the temperature has changed or at a certain rate). \n                                            The users are connected to the MQTT broker and subscribe to the temperature topic. \n                                            When the topic is updated, the users get a notification that it has been updated and retrieve the data from the broker - not the device.\n                                        </p>\n                                        <p class='archLayerText'>\n                                            Blinky-Lite uses the \n                                            <a class='link-text link-hover' target='_blank' href='https://mosquitto.org/'>Eclipse Mosquitto MQTT broker </a>\n                                            which is an open source broker. \n                                        </p>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('mqttBroker')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":1100,"y":240,"wires":[["78106121.86dbb"]]},{"id":"78106121.86dbb","type":"template","z":"fb032bb0.bba878","name":"controlbox.mongoDB","field":"payload.controlbox.mongoDB","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- controlbox.mongoDB -->\n                                    <div id='mongoDB' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            All control systems need to store data. \n                                            To provide flexibility for the type of data to be stored, Blinky lite uses \n                                            <a class='link-text link-hover' target='_blank' href='https://www.mongodb.com/'>MongoDB </a>\n                                            which is an open-source, non-relational  database. \n                                            Another advantage of MongoDB is that queries and data are in \n                                            <a class='link-text link-hover' target='_blank' href='https://www.json.org/'>JSON </a>\n                                            objects which is a natural fit to the javascript programming environment of Blinky-Lite. \n                                        </p>\n                                        <p class='archLayerText'>\n                                            Blinky-Lite has two databases, the Devices database and the Archiver database. \n                                            The Devices database contains a single record for each device in the control system. \n                                            The Archiver database has many entries for a single device.  A Device is considered to be a unique \n                                            <a class='link-text link-hover' target='_blank' href='http://mqtt.org/'>MQTT </a> \n                                            topic. Any topic is possible but this would make developing user applications problematic. \n                                            Blinky-Lite specifies the device topic have the following seven fields:\n                                        </p>\n                                        <p class='archLayerText'>\n                                            sys01/sys02/sys03/sys04/device/attr/prop\n                                        </p>\n                                        <p class='archLayerText'>\n                                            An example topic would be:\n                                        </p>\n                                        <p class='archLayerText'>\n                                            R3/rfroom/02/diag/oo/beamCurrent/reading\n                                        </p>\n                                        <p class='archLayerText'>\n                                            Stored in the record are device attributes such as alarm limits, archiving rate, and the latest data value along with timestamp for the device. \n                                            Blinky-Lite currently supports two types of data structures, scalar and vector. \n                                            However the flexible nature of MongoDB will permit many other types of data structures such as images.\n                                        </p>\n                                        <p class='archLayerText'>\n                                            The Blinky-Lite core application server subscribes to all MQTT topics in a Blinky-Lite control system. \n                                            When a new message is published, the data is stored in the Devices database. \n                                            The core application server then looks to see when the device data was last written to the Archiver \n                                            database and decides to write a new record to the Archiver database based on the archiving rate for the device.\n                                        </p>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('mongoDB')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":1100,"y":280,"wires":[["ffc43942.8f51e8"]]},{"id":"ffc43942.8f51e8","type":"template","z":"fb032bb0.bba878","name":"controlbox.coreAppServer","field":"payload.controlbox.coreAppServer","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- controlbox.coreAppServer -->\n                                    <div id='coreAppServer' class='readMoreDiv'>\n                                        <p class='archLayerText'>\n                                            The data collected by the database must eventually be consumed by the user. \n                                            Blinky-Lite provides seven web-based applications for the end user that access the \n                                            <a class='link-text link-hover' target='_blank' href='https://www.mongodb.com/'>MongoDB </a> \n                                            database.\n                                        </p>\n                                        <ul>\n                                            <li class='archLayerBulletText'>\n                                                Scalar Device Plotter\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            Plots a number of scalar devices in real time\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <a href='/img/readMore/scalarPlotter.png' target='_blank'><img src='/img/readMore/scalarPlotter.png' width='250px'/></a>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                            <li class='archLayerBulletText'>\n                                                Scalar Device Archive Plotter\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            Retrieves and plots the history over a specified time period for a number of scalar devices. \n                                                            Data can also be downloaded into a csv file.\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <a href='/img/readMore/scalarArchiver.png' target='_blank'><img src='/img/readMore/scalarArchiver.png' width='250px'/></a>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                            <li class='archLayerBulletText'>\n                                                Vector Device Plotter\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            Retrieves and plots the history over a specified time period for a number of scalar devices. \n                                                            Data can also be downloaded into a csv file.\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <table width='100%'>\n                                                                <tr>\n                                                                    <td width='50%' valign='middle'></td>\n                                                                    <td width='50%'>\n                                                                        <a href='/img/readMore/vectorPlotBird.png' target='_blank'>\n                                                                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorPlotBird.png' width='250px'/>\n                                                                        </a>\n                                                                    </td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <td width='50%'>\n                                                                        <a href='/img/readMore/vectorPlotTop.png' target='_blank'>\n                                                                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorPlotTop.png' width='250px'/>\n                                                                        </a>\n                                                                    </td>\n                                                                    <td width='50%'>\n                                                                        <a href='/img/readMore/vectorPlotSlice.png' target='_blank'>\n                                                                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorPlotSlice.png' width='250px'/>\n                                                                        </a>\n                                                                    </td>\n                                                               </tr>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                            <li class='archLayerBulletText'>\n                                                Vector Device Archive Plotter\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            Retrieves and plots the history over a specified time period for a single vector device. \n                                                            The display provides a number of different views. Data can also be downloaded into a csv file.\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <table width='100%'>\n                                                                <tr>\n                                                                    <td width='50%'></td>\n                                                                    <td width='50%'>\n                                                                        <a href='/img/readMore/vectorArchiveBird.png' target='_blank'>\n                                                                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorArchiveBird.png'/>\n                                                                        </a>\n                                                                    </td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <td width='50%'>\n                                                                        <a href='/img/readMore/vectorArchiveTop.png' target='_blank'>\n                                                                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorArchiveTop.png'/>\n                                                                        </a>\n                                                                    </td>\n                                                                    <td width='50%'>\n                                                                        <a href='/img/readMore/vectorArchiveSlice.png' target='_blank'>\n                                                                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorArchiveSlice.png'/>\n                                                                        </a>\n                                                                    </td>\n                                                                </tr>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                            <li class='archLayerBulletText'>\n                                                Alarm Scanner\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            Displays devices that are outside their alarm limits. The alarms can be filtered by device name. Also audible alarming can be enabled.\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <a href='/img/readMore/alarmScanner.png' target='_blank'><img src='/img/readMore/alarmScanner.png' width='250px'/></a>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                            <li class='archLayerBulletText'>\n                                                Device Viewer\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            The current values of a number of scalar devices are displayed. \n                                                            It is also possible to set the device values and then have the message broadcasted.\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <a href='/img/readMore/deviceViewer.png' target='_blank'><img src='/img/readMore/deviceViewer.png' width='250px'/></a>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                            <li class='archLayerBulletText'>\n                                                Device Editor\n                                                <table width='100%'>\n                                                    <tr>\n                                                        <td width='50%' valign=\"top\" class='archLayerText'>\n                                                            A tool for creating new devices or modifying existing devices.\n                                                       </td>\n                                                        <td width='50%'>\n                                                            <a href='/img/readMore/deviceEditor.png' target='_blank'><img src='/img/readMore/deviceEditor.png' width='250px'/></a>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            </li>\n                                        </ul>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('coreAppServer')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":1110,"y":320,"wires":[["b94f48c0.787308"]]},{"id":"b94f48c0.787308","type":"template","z":"fb032bb0.bba878","name":"controlbox.customAppServer","field":"payload.controlbox.customAppServer","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- controlbox.customAppServer -->\n                                    <div id='customAppServer' class='readMoreDiv'>\n                                        <table width='100%'>\n                                            <tr>\n                                                <td width='50%' valign=\"top\" class='archLayerText'>\n                                                   In case the applications available in the Core app server are not sufficient for the user needs, \n                                                   a custom app server can be implemented. The custom app server is encased in a Node-Red application.\n                                               </td>\n                                                <td width='50%'>\n                                                    <a href='/img/readMore/demoDmaUi.png' target='_blank'><img src='/img/readMore/demoDmaUi.png' width='250px'/></a>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                        <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('customAppServer')\" style='text-align:center;'>(show less)</button>\n                                    </div>\n","output":"str","x":1120,"y":360,"wires":[["c8ad797e.a40d58"]]},{"id":"419d5323.7ef3ac","type":"template","z":"fb032bb0.bba878","name":"demoCircuit","field":"payload.demoCircuit","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- demoCircuit -->\n                        <div id='demoCircuit' class='readMoreDiv'>\n                            <p  class='archLayerText'>\n                                You can download the the circuit diagram, breadboard layout, PCB layout, parts list, at the Blinky-Lite-Demo Github repository\n                                in the circuit-board-design folder of the \n                                <a class=\"link-text link-hover\" href=\"https://github.com/Blinky-Lite/blinky-lite-demo/archive/device-controller.zip\" target=\"_blank\">\n                                    archived device-controller zip file\n                                </a>\n                            </p>\n                            <table>\n                                <tr>\n                                    <td width='10%'></td>\n                                    <td width='35%' valign='middle'>\n                                        <a href='/img/tutorial/schem.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/schem.png\" >\n                                        </a>\n                                    </td>\n                                    <td width='10%'></td>\n                                    <td width='35%' valign='middle'>\n                                        <a href='/img/tutorial/schem.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/pcb.png\" >\n                                        </a>\n                                    </td>\n                                    <td width='10%'></td>\n                                </tr>\n                            </table>\n                            <table>\n                                <tr>\n                                    <td width='20%'></td>\n                                    <td valign='middle' width='60%'>\n                                        <a href='/img/tutorial/bread-board.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/bread-board.png\" >\n                                        </a>\n                                    </td>\n                                   <td width='20%'></td>\n                                 </tr>\n                            </table>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('demoCircuit')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":770,"y":500,"wires":[["3bd7fe1d.0e1652"]]},{"id":"3bd7fe1d.0e1652","type":"template","z":"fb032bb0.bba878","name":"deviceController","field":"payload.deviceController","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- deviceController -->\n                        <div id='deviceController' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                The demo circuit uses the \n                                <a class=\"link-text link-hover\" href=\"https://www.pjrc.com/teensy/teensyLC.html\" target=\"_blank\">\n                                    Teensy LC\n                                </a> \n                                as the device controller. The Teensy LC is programmed with the \n                                <a class=\"link-text link-hover\" href=\"https://www.arduino.cc/en/Main/Software\" target=\"_blank\">\n                                    Arduino IDE\n                                </a> \n                                . Instructions on how to setup the Arduino IDE for programming the Teensy is at \n                                <a class=\"link-text link-hover\" href=\"https://www.pjrc.com/teensy/teensyduino.html\" target=\"_blank\">\n                                    https://www.pjrc.com/teensy/teensyduino.html\n                                </a> \n                                . The sketch (or program) to be loaded on the Teensy LC is in the micro-controller-code folder of the \n                                <a class=\"link-text link-hover\" href=\"https://github.com/Blinky-Lite/blinky-lite-demo/archive/device-controller.zip\" target=\"_blank\">\n                                    archived device-controller zip file\n                                </a> \n                                . You can also view the \n                                 \n                                <a class=\"link-text link-hover\" href=\"https://github.com/Blinky-Lite/blinky-lite-demo/blob/device-controller/micro-controller-code/micro-controller-code.ino\" target=\"_blank\">\n                                    file\n                                </a> \n                                online at the demo github repository.\n                            </p>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('deviceController')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":780,"y":540,"wires":[["80b5c389.07ffd"]]},{"id":"80b5c389.07ffd","type":"template","z":"fb032bb0.bba878","name":"deviceMessageAdapter","field":"payload.deviceMessageAdapter","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- deviceMessageAdapter -->\n                        <div id='deviceMessageAdapter' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                The demo circuit uses the \n                                <a class=\"link-text link-hover\" href=\"https://www.raspberrypi.org/products/raspberry-pi-zero-w/\" target=\"_blank\">\n                                    Raspberry Pi Zero W\n                                </a> \n                                as the device message adapter. We will program the device message adapter with the  \n                                <a class=\"link-text link-hover\" href=\"https://nodered.org/\" target=\"_blank\">\n                                   Node-RED\n                                </a> \n                                programming enviroment. Instructions on how to setup the Raspberry Pi Zero W with the correct version of Node.js \n                                is outlined at the bottom of this tutorial. Use\n                            </p>\n                            <p class='archLayerBulletText'>\n                                blinky-lite-demo-dma-green\n                            </p>\n                            <p class='archLayerText'>\n                                as the hostname. Once the Raspberry Pi Zero W has been setup, \n                                login into the home directory of the Raspberry Pi Zero W \n                            </p>\n                            <code>ssh pi@blinky-lite-demo-dma-green.local</code><br>\n                            <p class='archLayerText'>\n                                and enter the following commands:\n                            </p>\n                            <code>\n                                wget https://github.com/Blinky-Lite/blinky-lite-demo/archive/device-message-adapter.zip<br>\n                                unzip device-message-adapter.zip<br>\n                                mv blinky-lite-demo-device-message-adapter blinky-lite-demo<br>\n                                rm device-message-adapter.zip<br>\n                                cd blinky-lite-demo<br>\n                                npm install<br>\n                            </code><br>\n                            <p class='archLayerText'>\n                                Now setup the enviromental variables that will be used in the Node-RED flow. Use the nano editor to edit the .env file\n                            </p>\n                            <code>nano .env</code><br>\n                            <p class='archLayerText'>\n                                and paste the following into the file. <i>(Make sure there is no carriage return at the end of the file).</i>\n                            </p>\n                            <code>\n                                ARCHIVERTOPIC=archiver\\/blinky-lite\\/demo\\/breadboard\\/green\\/<br>\n                                MQTTCLIENTID=blinky-lite-demo-green-dma<br>\n                                MQTTSERVERIP=blinky-lite-controlbox-demo.local<br>\n                                MQTTUSERNAME=blinky-lite-controlbox-demo<br>\n                                MQTTPASSWORD=blinky-lite<br>\n                                NODEREDCONFIGSECRET=a-secret-key\n                            </code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard. \n                            </p>\n                            <p class='archLayerText'>\n                                Now, to start the device message adapter on boot edit the /etc/rc.local file\n                            </p>\n                            <code>sudo nano /etc/rc.local</code><br>\n                            <p class='archLayerText'>\n                                Right before the line containing <b><i>exit 0</i></b>, enter\n                            </p>\n                            <code>/home/pi/blinky-lite-demo/run-blinky-lite.sh /home/pi/blinky-lite-demo > /home/pi/blinky-lite-demo.log &</code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard and reboot the Raspberry Pi. \n                            </p>\n                            <code>sudo reboot</code><br>\n                            <p class='archLayerText'>\n                                Once the computer is rebooted, the Raspberry Pi Zero W should be serving the device message adapter Node-RED flow. \n                                Point web browser at:\n                                <a class=\"link-text link-hover\" href=\"http://blinky-lite-demo-dma-green.local:1880/admin\" target=\"_blank\">\n                                    http://blinky-lite-demo-dma-green.local:1880/admin\n                                </a>\n                                You will see the Node-RED splash screen. The username is <b><i>admin</i></b> and the password is <b><i>blinky-lite</i></b>. \n                                Of course the username and password can be changed in the settings.js file in the blinky-lite-demo directory.\n                                Once the user name and password are entered, the device message adapter Node-RED flow is displayed and can be customized as the user desires.\n                                Please note that if the MQTT broker on the Control Box has not been setup, green flags will not appear next to the \n                                magenta colored MQTT nodes on the device message adapter flows.\n                            </p>\n                            <table>\n                                <tr>\n                                    <td width='5%' valign='middle'></td>\n                                    <td width='42.5%' valign='middle'>\n                                        <a href='/img/tutorial/node-red-splash.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/node-red-splash.png\" >\n                                        </a>\n                                    </td>\n                                    <td width='5%' valign='middle'></td>\n                                    <td width='42.5%' valign='middle'>\n                                        <a href='/img/tutorial/dma-flow.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/dma-flow.png\">\n                                        </a>\n                                    </td>\n                                    <td width='5%' valign='middle'></td>\n                                </tr>\n                            </table>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('deviceMessageAdapter')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":810,"y":580,"wires":[["d4935a11.3d0108"]]},{"id":"d4935a11.3d0108","type":"template","z":"fb032bb0.bba878","name":"controlBox","field":"payload.controlBox","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- controlBox -->\n                        <div id='controlBox' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                The Control Box in this tutorial runs on a \n                                <a class=\"link-text link-hover\" href=\"https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/\" target=\"_blank\">\n                                    Raspberry Pi 3B+\n                                </a> \n                                . Similar to the device message adapter, all code on the Control Box is written as   \n                                <a class=\"link-text link-hover\" href=\"https://nodered.org/\" target=\"_blank\">\n                                   Node-RED\n                                </a> \n                                flows. Instructions on how to setup the  Raspberry Pi 3B+ with the correct version of Node.js \n                                is outlined at the bottom of this tutorial. For the Control Box, the Mosquitto MQTT  broker and MongoDB database are required to be installed. \n                                Use:<br><br>\n                                <b><i>blinky-lite-controlbox-demo</i></b> as the hostname,<br>\n                                <b><i>blinky-lite-controlbox-demo</i></b> as the MQTT username,<br> \n                                and <b><i>blinky-lite</i></b> as the MQTT password.<br><br> \n                                These can be customized later on. Once the Raspberry Pi 3B+ has been setup, \n                                login into the home directory of the Raspberry Pi 3B+: \n                            </p>\n                            <code>ssh pi@blinky-lite-controlbox-demo.local</code><br>\n                            <p class='archLayerText'>\n                                and enter the MongoDB application to configure the database:\n                            </p>\n                            <code>mongo</code><br>\n                            <p class='archLayerText'>\n                                you will see a > line prompt. Enter at the prompt:\n                            </p>\n                            <code>use blinky-lite</code><br>\n                            <p class='archLayerText'>\n                                you get message: <b><i>switched to db blinky-lite</i></b>. Enter at the prompt:\n                            </p>\n                            <code>db.createCollection(\"devices\");</code><br>\n                            <p class='archLayerText'>\n                                you get message: <b><i>{ \"ok\" : 1 }</i></b>. Enter at the prompt:\n                            </p>\n                            <code>db.createCollection(\"archiver\");</code><br>\n                            <p class='archLayerText'>\n                                you get message: <b><i>{ \"ok\" : 1 }</i></b>. Enter at the prompt:\n                            </p>\n                            <code>exit</code><br>\n                            <p class='archLayerText'>\n                                you get message: <b><i>bye</i></b>\n                            </p>\n\n                            <p class='archLayerText'>\n                                From the /home/pi directory of the Control Box, enter the following commands:\n                            </p>\n                            <code>\n                                wget https://github.com/Blinky-Lite/blinky-lite-core/archive/master.zip<br>\n                                unzip master.zip<br>\n                                mv blinky-lite-core-master blinky-lite-core<br>\n                                rm master.zip<br>\n                                cd blinky-lite-core<br>\n                                npm install<br>\n                            </code><br>\n                            <p class='archLayerText'>\n                                Now setup the enviromental variables that will be used in the Node-RED flow. Use the nano editor to edit the .env file\n                            </p>\n                            <code>nano .env</code><br>\n                            <p class='archLayerText'>\n                                and paste the following into the file. <i>(Make sure there is no carriage return at the end of the file).</i>\n                            </p>\n                            <code>\n                                MONGODBIP=127.0.0.1<br>\n                                MQTTCLIENTID=blinky-lite-core-demo<br>\n                                MQTTSERVERIP=127.0.0.1<br>\n                                MQTTUSERNAME=blinky-lite-controlbox-demo<br>\n                                MQTTPASSWORD=blinky-lite<br>\n                                NODEREDCONFIGSECRET=a-secret-key\n                            </code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard. \n                            </p>\n                            <p class='archLayerText'>\n                                Now, to start the Control Box on boot edit the /etc/rc.local file\n                            </p>\n                            <code>sudo nano /etc/rc.local</code><br>\n                            <p class='archLayerText'>\n                                Right before the line containing <b><i>exit 0</i></b>, enter\n                            </p>\n                            <code>\n                                sleep 10<br>\n                                /home/pi/blinky-lite-core/run-blinky-lite.sh /home/pi/blinky-lite-core > /home/pi/blinky-lite-core.log &\n                            </code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard and reboot the Raspberry Pi. \n                                The 10 second sleep is to let MongoDB boot but is not necessary.\n                            </p>\n                            <code>sudo reboot</code><br>\n                            <p class='archLayerText'>\n                                Once the computer is rebooted, the Control Box should be serving Blinky-Lite core applications. \n                                Point web browser at:\n                                <a class=\"link-text link-hover\" href=\"http://blinky-lite-controlbox-demo.local:11880/\" target=\"_blank\">\n                                    http://blinky-lite-controlbox-demo.local:11880/\n                                </a>\n                                . You will see the Blinky-Lite Core application page. However, there are no device definitions entered into the database.\n                                You must use the Device Editor application to define devices.\n                            </p>\n                            <table>\n                                <tr>\n                                    <td width='5%' valign='middle'></td>\n                                    <td width='42.5%' valign='middle'>\n                                        <a href='/img/tutorial/core-app-server.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/core-app-server.png\" >\n                                        </a>\n                                    </td>\n                                    <td width='5%' valign='middle'></td>\n                                    <td width='42.5%' valign='middle'>\n                                        <a href='/img/tutorial/core-device-editor.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/core-device-editor.png\">\n                                        </a>\n                                    </td>\n                                    <td width='5%' valign='middle'></td>\n                                </tr>\n                            </table>\n                            <p class='archLayerText'>\n                                As of this writing, the Blinky-Lite Device Editor does not have a batch or spreadsheet upload for defining devices.\n                                The properties of each device must be entered separately. Use the table below to define the device properties for the demo circuit.\n                                The below table shows properties for two device message adapters - one <b><i>green</i></b>  and the other <b><i>red</i></b>\n                            </p>\n                            <div align='center'>\n                                <table class='partsTable' width='98%'>\n                                    <tr><th>sys01</th><th>sys02</th><th>sys03</th><th>sys04</th><th>device</th><th>attr</th><th>prop</th><th>type</th><th>archive_period</th><th>lolo</th><th>low</th><th>high</th><th>hihi</th><th>alarm</th><th>value</th><th>unit</th></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>led</td><td>value</td><td>reading</td><td>scalar</td><td>60000</td><td>10</td><td>20</td><td>235</td><td>245</td><td>4</td><td>255</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>led</td><td>value</td><td>setting</td><td>scalar</td><td>60000</td><td>10</td><td>20</td><td>235</td><td>245</td><td>0</td><td>125</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>led</td><td>period</td><td>reading</td><td>scalar</td><td>60000</td><td>100</td><td>200</td><td>1800</td><td>1900</td><td>1</td><td>100</td><td>mS</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>led</td><td>period</td><td>setting</td><td>scalar</td><td>60000</td><td>100</td><td>200</td><td>1800</td><td>1900</td><td>0</td><td>670</td><td>mS</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>photoDet</td><td>value</td><td>reading</td><td>scalar</td><td>60000</td><td>10</td><td>20</td><td>80</td><td>90</td><td>0</td><td>63</td><td>%</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>led</td><td>state</td><td>reading</td><td>scalar</td><td>60000</td><td>0</td><td>0.5</td><td>1.5</td><td>2</td><td>0</td><td>1</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>led</td><td>state</td><td>setting</td><td>scalar</td><td>60000</td><td>0</td><td>0.5</td><td>1.5</td><td>2</td><td>0</td><td>0</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>led</td><td>value</td><td>reading</td><td>scalar</td><td>60000</td><td>10</td><td>20</td><td>235</td><td>245</td><td>4</td><td>255</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>led</td><td>value</td><td>setting</td><td>scalar</td><td>60000</td><td>10</td><td>20</td><td>235</td><td>245</td><td>0</td><td>0</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>led</td><td>period</td><td>reading</td><td>scalar</td><td>60000</td><td>100</td><td>200</td><td>1800</td><td>1900</td><td>1</td><td>100</td><td>mS</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>led</td><td>period</td><td>setting</td><td>scalar</td><td>60000</td><td>100</td><td>200</td><td>1800</td><td>1900</td><td>1</td><td>100</td><td>mS</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>ultraDistance</td><td>value</td><td>reading</td><td>scalar</td><td>60000</td><td>1</td><td>10</td><td>20</td><td>40</td><td>0</td><td>10</td><td>cm</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>ultraDistance</td><td>alarm</td><td>reading</td><td>scalar</td><td>60000</td><td>1</td><td>10</td><td>20</td><td>40</td><td>0</td><td>10</td><td>cm</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>ultraDistance</td><td>alarm</td><td>setting</td><td>scalar</td><td>60000</td><td>1</td><td>10</td><td>20</td><td>40</td><td>0</td><td>0</td><td>cm</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>photoDet</td><td>value</td><td>reading</td><td>scalar</td><td>60000</td><td>10</td><td>20</td><td>80</td><td>90</td><td>2</td><td>87</td><td>%</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>ultraDistance</td><td>value</td><td>reading</td><td>scalar</td><td>60000</td><td>1</td><td>10</td><td>20</td><td>40</td><td>1</td><td>6</td><td>cm</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>ultraDistance</td><td>alarm</td><td>reading</td><td>scalar</td><td>60000</td><td>1</td><td>10</td><td>20</td><td>40</td><td>1</td><td>6</td><td>cm</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>led</td><td>state</td><td>reading</td><td>scalar</td><td>60000</td><td>0</td><td>0.5</td><td>1.5</td><td>2</td><td>0</td><td>1</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>temperature</td><td>average</td><td>reading</td><td>scalar</td><td>60000</td><td>10</td><td>15</td><td>25</td><td>40</td><td>2</td><td>28.31</td><td>C</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>red</td><td>temperature</td><td>average</td><td>reading</td><td>scalar</td><td>60000</td><td>10</td><td>15</td><td>25</td><td>40</td><td>2</td><td>28.51</td><td>C</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>led</td><td>state</td><td>setting</td><td>scalar</td><td>60000</td><td>0</td><td>0.5</td><td>1.5</td><td>2</td><td>2</td><td>2</td><td>unit</td></tr>\n                                    <tr><td>blinky-lite</td><td>demo</td><td>breadboard</td><td>green</td><td>ultraDistance</td><td>alarm</td><td>setting</td><td>scalar</td><td>60000</td><td>1</td><td>10</td><td>20</td><td>40</td><td>1</td><td>6</td><td>cm</td></tr>\n                                </table>\n                            </div>\n                            <p class='archLayerText'>\n                                Once the device properties have been entered, the suite of core applications should be operational. \n                                Note for the tutorial, no vector devices have been defined.\n                            </p>\n                            <div align='center'>\n                                <table width=90%>\n                                    <tr>\n                                        <td width='36%' valign='middle' align='center'>\n                                            <a href='/img/readMore/scalarPlotter.png' target='_blank'>\n                                                <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/scalarPlotter.png\" >\n                                            </a>\n                                        </td>\n                                        <td width='28%' valign='middle' align='center'>\n                                            <a href='/img/readMore/scalarArchiver.png' target='_blank'>\n                                                <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/scalarArchiver.png\" >\n                                            </a>\n                                        </td>\n                                        <td width='36%' valign='middle' align='center'>\n                                            <a href='/img/readMore/alarmScanner.png' target='_blank'>\n                                                <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/alarmScanner.png\">\n                                            </a>\n                                        </td>\n                                    </tr>\n                                 </table>\n                                <table width=90%>\n                                    <tr>\n                                        <td width='34%' valign='middle' align='center'>\n                                            <a href='/img/readMore/deviceEditor.png' target='_blank'>\n                                                <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/deviceEditor.png\" >\n                                            </a>\n                                        </td>\n                                        <td width='66%' valign='middle' align='center'>\n                                            <a href='/img/readMore/deviceViewer.png' target='_blank'>\n                                                <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/readMore/deviceViewer.png\" >\n                                            </a>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </div>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('controlBox')\" style='text-align:center;'>(show less)</button>\n                        </div>\n  ","output":"str","x":770,"y":620,"wires":[["60eb40f7.64dac"]]},{"id":"60eb40f7.64dac","type":"template","z":"fb032bb0.bba878","name":"customApp","field":"payload.customApp","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- customApp -->\n                        <div id='customApp' class='readMoreDiv'>\n                            <p class='archLayerText'>\n                                If the core applications do not serve all of the users needs, then a custom application server can be installed on the Control Box.\n                                To install the demo custom application server login into the home directory of the Control Box: \n                            </p>\n                            <code>ssh pi@blinky-lite-controlbox-demo.local</code><br>\n                           <p class='archLayerText'>\n                                From the /home/pi directory of the Control Box, enter the following commands:\n                            </p>\n                            <code>\n                                wget https://github.com/Blinky-Lite/blinky-lite-demo/archive/user-interface.zip<br>\n                                unzip user-interface.zip<br>\n                                mv blinky-lite-demo-user-interface blinky-lite-demo-ui<br>\n                                rm user-interface.zip<br>\n                                cd blinky-lite-demo-ui<br>\n                                npm install<br>\n                            </code><br>\n                            <p class='archLayerText'>\n                                Now setup the enviromental variables that will be used in the Node-RED flow. Use the nano editor to edit the .env file\n                            </p>\n                            <code>nano .env</code><br>\n                            <p class='archLayerText'>\n                                and paste the following into the file. <i>(Make sure there is no carriage return at the end of the file).</i>\n                            </p>\n                            <code>\n                                MONGODBIP=127.0.0.1<br>\n                                MQTTCLIENTID=blinky-lite-demo-ui<br>\n                                MQTTSERVERIP=127.0.0.1<br>\n                                MQTTUSERNAME=blinky-lite-controlbox-demo<br>\n                                MQTTPASSWORD=blinky-lite<br>\n                                APPPORT=1880<br>\n                                COREPORT=11880<br>\n                                NODEREDCONFIGSECRET=a-secret-key                            \n                            </code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard. \n                            </p>\n                            <p class='archLayerText'>\n                                Now, to start the custom application server on boot edit the /etc/rc.local file\n                            </p>\n                            <code>sudo nano /etc/rc.local</code><br>\n                            <p class='archLayerText'>\n                                Right before the line containing <b><i>exit 0</i></b>, enter\n                            </p>\n                            <code>\n                                sleep 10<br>\n                                /home/pi/blinky-lite-demo-ui/run-blinky-lite.sh /home/pi/blinky-lite-demo-ui > /home/pi/blinky-lite-demo-ui.log &\n                            </code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard and reboot the Raspberry Pi. \n                                The 10 second sleep is to let core application server boot but is not necessary.\n                            </p>\n                            <code>sudo reboot</code><br>\n                            <p class='archLayerText'>\n                                Once the computer is rebooted, the custom application server should be serving  the custom applications. \n                                Point web browser at:\n                                <a class=\"link-text link-hover\" href=\"http://blinky-lite-controlbox-demo.local:1880/\" target=\"_blank\">\n                                    http://blinky-lite-controlbox-demo.local:1880/\n                                </a>\n                                . You will see the custom application launch page. From this page you can reach the custom applications as well as the core applications.\n                            </p>\n                            <table>\n                                <tr>\n                                    <td width='5%' valign='middle'></td>\n                                    <td width='42.5%' valign='middle'>\n                                        <a href='/img/tutorial/customAppLauncher.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/customAppLauncher.png\" >\n                                        </a>\n                                    </td>\n                                    <td width='5%' valign='middle'></td>\n                                    <td width='42.5%' valign='middle'>\n                                        <a href='/img/tutorial/greenCustomApp.png' target='_blank'>\n                                            <img class=\"featurette-image img-fluid mx-auto\" src=\"/img/tutorial/greenCustomApp.png\">\n                                        </a>\n                                    </td>\n                                    <td width='5%' valign='middle'></td>\n                                </tr>\n                            </table>\n                            <p  class='archLayerText'>\n                                It is a bit clumsy to have the default Node-RED port number in the address of the custom application server. \n                                This port can be routed to the default browser port 80 by the following steps.\n                            </p>\n                            <code>\n                                sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 1880<br>\n                                sudo iptables -t nat -I OUTPUT -p tcp -d 127.0.0.1 --dport 80 -j REDIRECT --to-ports 1880<br>\n                                sudo sh -c \"iptables-save > /etc/iptables.ipv4.nat\"\n                            </code><br>\n                             <p  class='archLayerText'>\n                                Now edit the /etc/rc.local file:\n                            </p>\n                            <code>sudo nano /etc/rc.local</code><br>\n                            <p class='archLayerText'>\n                                Right before the line containing <b><i>exit 0</i></b>, enter\n                            </p>\n                            <code>\n                                iptables-restore &#60; /etc/iptables.ipv4.nat\n                            </code><br>\n                            <p class='archLayerText'>\n                                Save and exit the nano editor by entering <b><i>Ctrl-x</i></b> on the keyboard and reboot the Raspberry Pi.\n                            </p>\n                            <code>sudo reboot</code><br>\n                            <p class='archLayerText'>\n                                Once the computer is rebooted, the custom application server should be serving  on port 80. \n                                Point web browser at:\n                                <a class=\"link-text link-hover\" href=\"http://blinky-lite-controlbox-demo.local/\" target=\"_blank\">\n                                    http://blinky-lite-controlbox-demo.local/\n                                </a>\n                            </p>\n                            <button class=\"btn card-button\" type=\"button\" onclick=\"topicClicked('customApp')\" style='text-align:center;'>(show less)</button>\n                        </div>\n","output":"str","x":770,"y":660,"wires":[["a6f52546.e6cce8"]]},{"id":"e7add4a8.c51658","type":"function","z":"e8763d21.b7461","name":"ClientInfo","func":"var ipfilter = [\"127.0.0.1\",\"83.254.136.245\"]\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nvar url = msg.req.url;\nif (ipAddress==undefined) return null;\nif (url == '/log') return null;\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    if (ipAddress == ipfilter[ii]) return null;\n}\nreturn {\n    topic:'clientInfo', \n    payload:{\n        ipAddress   : ipAddress\n    },\n    extraInfo       : {url:url},\n};\n","outputs":1,"noerr":0,"x":1080,"y":120,"wires":[["2f403c68.5a7a14"]]},{"id":"52ff40c6.54a87","type":"http request","z":"fb032bb0.bba878","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"https://tools.keycdn.com/geo.json?host={{{payload.ipAddress}}}","tls":"","proxy":"","authType":"basic","x":430,"y":1100,"wires":[["72e15a48.a64fd4","880eea48.f3bb18"]]},{"id":"1c240210.06784e","type":"inject","z":"fb032bb0.bba878","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":140,"y":1100,"wires":[["1394d3da.2fabec"]]},{"id":"1394d3da.2fabec","type":"function","z":"fb032bb0.bba878","name":"Fake IP","func":"return {\n    topic:'clientInfo', \n    payload:{\n        ipAddress   : \"194.47.252.22\",\n    },\n    extraInfo         : {url:'/'}\n};\n","outputs":1,"noerr":0,"x":280,"y":1100,"wires":[["52ff40c6.54a87"]]},{"id":"72e15a48.a64fd4","type":"function","z":"fb032bb0.bba878","name":"parseIpRequest","func":"var data = msg.payload.data.geo;\ndata['url'] = msg.extraInfo.url;\nvar tableRow = '<tr>';\ntableRow = tableRow + '<td>' + data['ip'] + '</td>';\ntableRow = tableRow + '<td>' + data['country_code'] + '</td>';\ntableRow = tableRow + '<td>' + data['region_name'] + '</td>';\ntableRow = tableRow + '<td>' + data['city'] + '</td>';\ntableRow = tableRow + '<td>' + data['rdns'] + '</td>';\ntableRow = tableRow + '<td>' + data['isp'] + '</td>';\ntableRow = tableRow + '<td>' + data['timezone'] + '</td>';\ntableRow = tableRow + '<td>' + data['datetime'] + '</td>';\ntableRow = tableRow + '<td>' + data['url'] + '</td>';\ntableRow = tableRow + '</tr>';\n\nreturn {topic:'www.blinky-lite.io' + data.url, payload:tableRow, extraInfo:tableRow};\n","outputs":1,"noerr":0,"x":600,"y":1100,"wires":[["ea2e0b72.310888"]]},{"id":"2f403c68.5a7a14","type":"http request","z":"e8763d21.b7461","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"https://tools.keycdn.com/geo.json?host={{{payload.ipAddress}}}","tls":"","proxy":"","authType":"basic","x":1090,"y":160,"wires":[["605b2e80.be283"]]},{"id":"8613d7ed.db11c8","type":"file","z":"fb032bb0.bba878","name":"","filename":"html-static/log.txt","appendNewline":false,"createDir":false,"overwriteFile":"true","encoding":"none","x":1170,"y":1100,"wires":[[]]},{"id":"b354fde5.51e79","type":"http in","z":"fb032bb0.bba878","name":"log","url":"/log","method":"get","upload":false,"swaggerDoc":"","x":90,"y":880,"wires":[["c675b30e.556c"]]},{"id":"acb30b9a.808368","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n<table width='100%'>\n    <tr>\n        <th>ip</th><th>country</th><th>region</th><th>city</th><th>rdns</th>\n        <th>isp</th><th>timezone</th><th>datetime</th><th>url</th>\n    </tr>\n{{{payload.logDataRows}}}\n</table>\n","output":"str","x":810,"y":940,"wires":[["806bf3b8.da9b2"]]},{"id":"2a7641c.8bba2be","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Blinky-Lite Log","output":"str","x":370,"y":940,"wires":[["f7e82dd0.0246f"]]},{"id":"806bf3b8.da9b2","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":970,"y":940,"wires":[]},{"id":"a3735fbd.3edbc","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n","output":"str","x":230,"y":940,"wires":[["2a7641c.8bba2be"]]},{"id":"f7e82dd0.0246f","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/BlinkyLogoSmall.png\" height=\"70px\" style='padding-right: 20px;'/>","output":"str","x":500,"y":940,"wires":[["e4ad8f28.4ca22"]]},{"id":"e4ad8f28.4ca22","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"","output":"str","x":660,"y":940,"wires":[["acb30b9a.808368"]]},{"id":"c675b30e.556c","type":"file in","z":"fb032bb0.bba878","name":"","filename":"html-static/log.txt","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":250,"y":880,"wires":[["349a37ee.cf32b8"]]},{"id":"349a37ee.cf32b8","type":"function","z":"fb032bb0.bba878","name":"Add log data rows","func":"var logDataRows = msg.payload;\nmsg.payload = {logDataRows:logDataRows};\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":880,"wires":[["a3735fbd.3edbc"]]},{"id":"ea2e0b72.310888","type":"file in","z":"fb032bb0.bba878","name":"","filename":"html-static/log.txt","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":790,"y":1100,"wires":[["fb572f6d.dd0d5"]]},{"id":"fb572f6d.dd0d5","type":"function","z":"fb032bb0.bba878","name":"Insert new row","func":"msg.payload = msg.extraInfo + '\\n' + msg.payload;\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":1100,"wires":[["8613d7ed.db11c8"]]},{"id":"329a7a3b.fea916","type":"inject","z":"fb032bb0.bba878","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":140,"y":1160,"wires":[["3696708.47df29"]]},{"id":"3696708.47df29","type":"file in","z":"fb032bb0.bba878","name":"","filename":"html-static/log.txt","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":310,"y":1160,"wires":[["5393ab2e.b853c4"]]},{"id":"5393ab2e.b853c4","type":"debug","z":"fb032bb0.bba878","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":490,"y":1160,"wires":[]},{"id":"605b2e80.be283","type":"function","z":"e8763d21.b7461","name":"parseIpRequest","func":"var data = msg.payload.data.geo;\ndata['url'] = msg.extraInfo.url;\nvar tableRow = '<tr>';\ntableRow = tableRow + '<td>' + data['ip'] + '</td>';\ntableRow = tableRow + '<td>' + data['country_code'] + '</td>';\ntableRow = tableRow + '<td>' + data['region_name'] + '</td>';\ntableRow = tableRow + '<td>' + data['city'] + '</td>';\ntableRow = tableRow + '<td>' + data['rdns'] + '</td>';\ntableRow = tableRow + '<td>' + data['isp'] + '</td>';\ntableRow = tableRow + '<td>' + data['timezone'] + '</td>';\ntableRow = tableRow + '<td>' + data['datetime'] + '</td>';\ntableRow = tableRow + '<td>' + data['url'] + '</td>';\ntableRow = tableRow + '</tr>';\n\nreturn {topic:'www.blinky-lite.io' + data.url, payload:tableRow, extraInfo:tableRow};\n","outputs":1,"noerr":0,"x":1100,"y":200,"wires":[["c4231fa6.84fa6"]]},{"id":"775cb478.9ea43c","type":"file","z":"e8763d21.b7461","name":"","filename":"html-static/log.txt","appendNewline":false,"createDir":false,"overwriteFile":"true","encoding":"none","x":1110,"y":320,"wires":[[]]},{"id":"c4231fa6.84fa6","type":"file in","z":"e8763d21.b7461","name":"","filename":"html-static/log.txt","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":1110,"y":240,"wires":[["29818b36.d37134"]]},{"id":"29818b36.d37134","type":"function","z":"e8763d21.b7461","name":"Insert new row","func":"msg.payload = msg.extraInfo + '\\n' + msg.payload;\nreturn msg;","outputs":1,"noerr":0,"x":1100,"y":280,"wires":[["775cb478.9ea43c"]]},{"id":"f051e9c3.a64378","type":"comment","z":"fb032bb0.bba878","name":"Test","info":"","x":110,"y":1040,"wires":[]},{"id":"155c9a7a.9960f6","type":"http in","z":"fb032bb0.bba878","name":"coreApps","url":"/coreApps","method":"get","upload":false,"swaggerDoc":"","x":100,"y":780,"wires":[["3214049.24508fc"]]},{"id":"c8ccd734.9a6468","type":"template","z":"fb032bb0.bba878","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div class=\"container marketing\">\n        <div class=\"row featurette\">\n            <h2 class=\"featurette-heading\">Blinky-Lite provides seven web-based applications out of the box.</h2>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Scalar Device Plotter</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                        <p class='lead'>\n                            Plots a number of scalar devices in real time\n                        </p>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <a href='/img/readMore/scalarPlotter.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/scalarPlotter.png'/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Scalar Device Archive Plotter</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                        <p class='lead'>\n                            Retrieves and plots the history over a specified time period for a number of scalar devices.\n                            Data can also be downloaded into a csv file.\n                        </p>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <a href='/img/readMore/scalarArchiver.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/scalarArchiver.png'/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Vector Device Plotter</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <table width='100%'>\n                            <tr>\n                                <td width='50%' valign='middle'>\n                                     <p class='lead'>\n                                        Plots a single vector device in real time.<br> \n                                        The display provides a number of different views.\n                                    </p>\n                                </td>\n                                <td width='50%'>\n                                    <a href='/img/readMore/vectorPlotBird.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorPlotBird.png'/>\n                                    </a>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td width='50%'>\n                                    <a href='/img/readMore/vectorPlotTop.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorPlotTop.png'/>\n                                    </a>\n                                </td>\n                                <td width='50%'>\n                                    <a href='/img/readMore/vectorPlotSlice.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorPlotSlice.png'/>\n                                    </a>\n                                </td>\n                           </tr>\n                        </table>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Vector Device Archive Plotter</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <table width='100%'>\n                            <tr>\n                                <td width='50%'>\n                                    <p class='lead'>\n                                        Retrieves and plots the history over a specified time period for a single vector device.<br>\n                                        The display provides a number of different views.<br>Data can also be downloaded into a csv file.\n                                    </p>\n                                </td>\n                                <td width='50%'>\n                                    <a href='/img/readMore/vectorArchiveBird.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorArchiveBird.png'/>\n                                    </a>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td width='50%'>\n                                    <a href='/img/readMore/vectorArchiveTop.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorArchiveTop.png'/>\n                                    </a>\n                                </td>\n                                <td width='50%'>\n                                    <a href='/img/readMore/vectorArchiveSlice.png' target='_blank'>\n                                        <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/vectorArchiveSlice.png'/>\n                                    </a>\n                                </td>\n                            </tr>\n                        </table>\n                     </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Alarm Scanner</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                        <p class='lead'>\n                            Displays devices that are outside their alarm limits. \n                            The alarms can be filtered by device name. \n                            Also audible alarming can be enabled.\n                        </p>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <a href='/img/readMore/alarmScanner.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/alarmScanner.png'/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Device Viewer</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                        <p class='lead'>\n                            The current values of a number of scalar devices are displayed.\n                            It is also possible to set the device values and then have the message broadcasted.\n                        </p>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <a href='/img/readMore/deviceViewer.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/deviceViewer.png'/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <hr class=\"featurette-divider\">\n        <div class=\"row featurette\">\n            <h3 class=\"featurette-heading\">Device Editor</h3>\n            <table width='100%'>\n                <tr>\n                    <td width='20%' valign='middle'>\n                        <p class='lead'>\n                            A tool for creating new devices or modifying existing devices.\n                        </p>\n                    </td>\n                    <td width='80%' valign='middle'>\n                        <a href='/img/readMore/deviceEditor.png' target='_blank'>\n                            <img class=\"featurette-image img-fluid mx-auto\" src='/img/readMore/deviceEditor.png'/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n","output":"str","x":830,"y":780,"wires":[["9ae139e0.612bd8"]]},{"id":"bdd3d2c0.ca0f1","type":"template","z":"fb032bb0.bba878","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Core Applications","output":"str","x":390,"y":780,"wires":[["f641fedf.0d555"]]},{"id":"9ae139e0.612bd8","type":"subflow:e8763d21.b7461","z":"fb032bb0.bba878","name":"","env":[],"x":990,"y":780,"wires":[]},{"id":"3214049.24508fc","type":"template","z":"fb032bb0.bba878","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"// Custom Javascript\n","output":"str","x":250,"y":780,"wires":[["bdd3d2c0.ca0f1"]]},{"id":"f641fedf.0d555","type":"template","z":"fb032bb0.bba878","name":"App Icon","field":"payload.appicon","fieldType":"msg","format":"html","syntax":"mustache","template":"<img src=\"/img/BlinkyLogoSmall.png\" height=\"70px\" style='padding-right: 20px;'/>","output":"str","x":520,"y":780,"wires":[["ef604e34.11b4"]]},{"id":"ef604e34.11b4","type":"template","z":"fb032bb0.bba878","name":"jumbotronExtras","field":"payload.jumbotronExtras","fieldType":"msg","format":"html","syntax":"mustache","template":"    <table width='100%'>\n        <tr>\n            <td align='left'>\n                <a href='/readmore' style='color: white;text-decoration:underline;'>Read More</a>\n            </td>\n            <td align='center'>\n                <h2 style=\"text-align: center; color:--container-title-color;\"></h2>                \n            </td>\n            <td align='right'>\n                <a href='/tutorial' style='color: white;text-decoration:underline;'>Learn How</a>\n            </td>\n        </tr>\n    </table> \n","output":"str","x":680,"y":780,"wires":[["c8ccd734.9a6468"]]},{"id":"880eea48.f3bb18","type":"debug","z":"fb032bb0.bba878","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":580,"y":1040,"wires":[]},{"id":"2ec0c48e.3215dc","type":"template","z":"fb032bb0.bba878","name":"custom.css","field":"payload.custom.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        .archLayerBulletText\n        {\n          color: var(--container-background-color);\n          font-weight: bold;\n          font-size: large;\n        }\n        .archLayerText\n        {\n          color: var(--background-text);\n          font-weight: normal;\n          font-size: large;\n        }\n        .readMoreDiv\n        {\n            border-style: solid;\n            border-width: 2px;\n            border-color: var(--background-text);\n        }\n","output":"str","x":230,"y":60,"wires":[["6f2cf928.181b38"]]},{"id":"f1df0c69.8fcb1","type":"function","z":"e8763d21.b7461","name":"IP filter","func":"var ipfilter = [\n    \"127.0.0.6\",\n    \"46.119.*.*\",\n    \"46.118.*.*\",\n    \"178.137.*.*\",\n    \"37.115.*.*\",\n    \"176.8.*.*\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii]) return null;\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":940,"y":40,"wires":[["e7add4a8.c51658","233dd1ed.d17ede"]]},{"id":"e8e50248.ebbca","type":"http in","z":"ed22476a.57d2f8","name":"Index","url":"/","method":"get","upload":false,"swaggerDoc":"","x":90,"y":40,"wires":[["55428239.603b4c"]]},{"id":"55428239.603b4c","type":"template","z":"ed22476a.57d2f8","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div align='center'>\n        <iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vR2vyqzXVdf_xuC4Ylq7hOJ4dmltmJfskOdLsC-6HzfqZxkfeD7iA5T68mZRb-VzEUcmPsNRJbqTd2H/embed?start=true&loop=false&delayms=8000\" frameborder=\"0\" width=\"960\" height=\"749\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n    </div>","output":"str","x":210,"y":40,"wires":[["aa02dbca.627d18"]]},{"id":"6cf67254.4bd1fc","type":"template","z":"ed22476a.57d2f8","name":"HTML","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.body}}}\n  </body>\n</html>","output":"str","x":970,"y":40,"wires":[["c4f9d991.a89ed8"]]},{"id":"87b209e0.370158","type":"template","z":"ed22476a.57d2f8","name":"Head","field":"payload.head","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Head -->\n    <meta charset=\"UTF-8\"/>\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-122300334-1\"></script>\n    <script>\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n    \n      gtag('config', 'UA-122300334-1');\n    </script>\n    <!-- Custom CSS -->\n    <style>\n{{{payload.css}}}\n    </style>\n","output":"str","x":590,"y":40,"wires":[["db676869.1b8858"]]},{"id":"c4f9d991.a89ed8","type":"http response","z":"ed22476a.57d2f8","name":"","statusCode":"","headers":{},"x":1090,"y":40,"wires":[]},{"id":"aa02dbca.627d18","type":"template","z":"ed22476a.57d2f8","name":"CSS","field":"payload.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #7395ae;\n          --background-text: #f6d7a2;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n        :root {\n          --container-background-color: #557a95;\n          --container-title-color: #fdc300;\n          --container-text-color: #ffffff;\n          --background-color: #ffffff;\n          --background-text: #7395ae;\n          --sub-container-background-color: #bbbbbb;\n          --sub-container-title-color: #ffbb33;\n          --sub-container-text-color: #000000;\n        }\n        ul {\n            list-style-type: disk;\n        }\n        li {\n            vertical-align:middle;\n        }\n        code {\n            display:block;\n            padding-top:5px;\n            padding-bottom:5px;\n            background-color: var(--sub-container-text-color);\n            color: var(--sub-container-title-color);\n        }\n        body {\n          background-color: var(--background-color);\n          padding-left:25px;\n          padding-right:25px;\n        }\n        .link-text {\n          color: var(--background-text);\n          text-decoration: underline;\n          font-weight: bold;\n\n        }\n        :hover.link-hover {\n          color: var(--container-title-color);\n          text-decoration: underline;\n        }\n       .link-icon {\n          padding: 1px;\n          color: var(--container-background-color);\n        }\n       .link-icon-hover {\n          padding: 1px;\n          color: var(--background-text);\n        }\n        \n        img {\n          object-fit: contain;\n        }\n        .col {\n          padding-bottom: 20px;\n        }\n        .jumbotron {\n          background-color: var(--container-background-color) !important;\n          color:var(--container-text-color);\n          padding-bottom: 10px;\n          padding-top: 10px;\n        }\n        .jumbotron-link\n        {\n            color: var(--container-title-color);\n        }\n        :hover.jumbotron-link-hover\n        {\n            color: var(--background-text);\n        }    \n        .jumbotron-title\n        {\n          color:var(--container-title-color);\n        }\n        .jumbotron-button\n        {\n          color: var(--container-background-color)  !important;\n          background-color: var(--container-title-color);\n        }\n        .lead\n        {\n          color: var(--background-text);\n       }\n        .featurette-heading\n        {\n          color:var(--container-background-color);\n        }\n        .featurette-heading-link\n        {\n          color: var(--container-title-color);\n        }\n        .card\n        {\n          background-color: var(--container-background-color);\n          text-align: center;\n          padding: 10px;\n        }\n        .card-body\n        {\n          color: var(--sub-container-text-color);\n          background-color: var(--sub-container-background-color);\n        }\n        .card-button\n        {\n          color: var(--background-color);\n          font-weight: bold;\n          background-color: var(--container-background-color);\n        }\n        .card-title\n        {\n          color: var(--container-title-color);\n          font-weight: bold;\n        }\n        .card-major-bullet\n        {\n          text-align: left;\n        }\n        .card-minor-bullet\n        {\n          text-align: left;\n        }\n        .card-minor-minor-bullet {\n        \tfont-size:  small;\n          font-style:italic;\n        }\n         .card-text\n        {\n          text-align: left;\n        }\n         .card-text-link\n        {\n            color: var(--container-background-color);\n            text-decoration: underline;\n        }\n         .card-link\n        {\n            color: var(--sub-container-background-color);\n            text-decoration: underline;\n        }\n        .scrolling-wrapper {\n          width: 100%;\n          display: inline-block;\n          overflow-x: scroll;\n          overflow-y: hidden;\n          white-space: nowrap;\n        }\n        .footer {\n        /*   position: fixed; */\n           left: 0;\n           bottom: 0;\n           width: 100%;\n           color:var(--container-background-color);\n           background-color: var(--background-color);\n           text-align: center;\n        }\n        .img-max {\n          width: 99%;\n        }\n        .bot-pad\n        {\n          padding-bottom: 20px;\n        }\n        .span-left-justify\n        {\n          float:left;\n        }\n        .right-justify\n        {\n          text-align: right;\n        }\n        .left-justify\n        {\n          text-align: left;\n        }\n        .center-justify\n        {\n          text-align: center;\n        }\n        .radio-button-border\n        {\n          border-style: solid;\n          border-color: var(--container-title-color);\n          border-width: 2px;\n        }\n        .tableHeading\n        {\n          color:var(--background-text);\n          font-weight: 900;\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-weight: 900;\n        }\n        .custom-select\n        {\n          color: var(--container-text-color);\n          background-color: var(--background-color);\n        \n        }\n        .plain-text\n        {\n            color: var(--sub-container-text-color);\n            font-size:medium;\n        }\n","output":"str","x":330,"y":40,"wires":[["8bfd1a12.1c8bc8"]]},{"id":"8bfd1a12.1c8bc8","type":"template","z":"ed22476a.57d2f8","name":"navBar","field":"payload.navBar","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- navBar -->\n    <div width=\"100%\" style='padding-top:10px;padding-bottom:10px'>\n        <table width='100%'>\n            <tr valign=\"middle\">\n                <td valign=\"middle\" width=\"25%\" align='left'>\n                    <img src=\"/img/BlinkyLogo.gif\" height=\"50px\" />\n                </td>\n                <td valign=\"middle\" width=\"25%\" align='center'>\n                    <a href=\"/\" ><img src=\"/img/home.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"home\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"25%\" align='center'>\n                    <a href=\"https://github.com/Blinky-Lite\" target=\"_blank\"><img src=\"/img/github.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Github\" /></a>\n                </td>\n                <td valign=\"middle\" width=\"25%\" align='center'>\n                    <a href=\"mailto:info@blinky-lite.io\"><img src=\"/img/mail.png\" height=\"50px\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Contact\" /></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n","output":"str","x":460,"y":40,"wires":[["87b209e0.370158"]]},{"id":"db676869.1b8858","type":"function","z":"ed22476a.57d2f8","name":"IP filter","func":"var ipfilter = [\n    \"127.0.0.6\",\n    \"46.119.*.*\",\n    \"46.118.*.*\",\n    \"178.137.*.*\",\n    \"37.115.*.*\",\n    \"176.8.*.*\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":720,"y":40,"wires":[["69e0ac89.77a704","6cf67254.4bd1fc"]]},{"id":"69e0ac89.77a704","type":"function","z":"ed22476a.57d2f8","name":"ClientInfo","func":"var ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nvar url = msg.req.url;\nreturn {\n    topic:'clientInfo', \n    payload:{\n        ipAddress   : ipAddress\n    },\n    extraInfo       : {url:url},\n};\n","outputs":1,"noerr":0,"x":840,"y":100,"wires":[["8e2f5279.c3703"]]},{"id":"8e2f5279.c3703","type":"http request","z":"ed22476a.57d2f8","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"https://tools.keycdn.com/geo.json?host={{{payload.ipAddress}}}","tls":"","proxy":"","authType":"basic","x":850,"y":140,"wires":[["ea33261c.0f2328"]]},{"id":"ea33261c.0f2328","type":"function","z":"ed22476a.57d2f8","name":"parseIpRequest","func":"var data = msg.payload.data.geo;\ndata['url'] = msg.extraInfo.url;\ndata['userID'] = msg.extraInfo.userID;\ndata['timeStamp'] = new Date().getTime();\nreturn {topic:'ipData', payload:data};\n","outputs":1,"noerr":0,"x":860,"y":180,"wires":[["993f13fa.ad6c4"]]},{"id":"993f13fa.ad6c4","type":"mongodb3 in","z":"ed22476a.57d2f8","service":"_ext_","configNode":"f6f711c0.7ba24","name":"","collection":"accessLog","operation":"insertOne","x":910,"y":220,"wires":[[]]},{"id":"f93ad39b.4fa9","type":"template","z":"5cd741ff.0cac8","name":"navBar","field":"payload.navBar","fieldType":"msg","format":"html","syntax":"mustache","template":"    <div class=\"jumbotron\" width=\"100%\">\n        <div class=\"row\">\n            <div class=\"col-md-2\" style=\"text-align: left\">\n                <a href='/core' >\n                    <img src=\"/img/home.png\" height=\"75px\"/>\n                </a>\n            </div>\n            <div class=\"col-md-8\" style=\"text-align: center\">\n                <h1 class=\"display-5 jumbotron-title\">{{{payload.title}}}</h1>\n            </div>\n            <div class=\"col-md-2\" style=\"text-align: right\"><a href='https://www.blinky-lite.io/' target='_blank'><img src=\"/img/BlinkyLogo.gif\" height=\"50px\"/></a></div>\n        </div>\n    </div>","output":"str","x":200,"y":80,"wires":[[]]},{"id":"b7e65e21.fdde3","type":"template","z":"639505ca.481e8c","name":"CSS","field":"payload.css","fieldType":"msg","format":"css","syntax":"mustache","template":"        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color:var(--white);\n          padding-bottom: 10px;\n          padding-top: 10px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n          font-weight: 900;\n        }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n          padding: 10px;\n        }\n        .card-body\n        {\n          background-color: var(--color3);\n        }\n        .card-button\n        {\n          color: var(--color5);\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: bold;\n        }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n        }\n        .tableHeading\n        {\n          color:var(--color1);\n          font-weight: 900;\n        }\n        .tableText\n        {\n          color:var(--color1);\n          font-weight: 900;\n        }\n        .custom-select\n        {\n          color: white;\n          background-color: var(--color3);\n        \n        }\n        .form-control\n        {\n          text-align: center;\n        }\n        .checkbox-align\n        {\n          vertical-align: middle;\n          text-align: center;\n        }\n        .csv-linked\n        {\n            color: blue;\n        }\n        .csv-unlinked\n        {\n            color: red;\n        }\n        .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n        .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n","output":"str","x":190,"y":80,"wires":[[]]},{"id":"2b728ccc.30d9d4","type":"template","z":"2c6a590c.6fc7f6","name":"HTML","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>","output":"str","x":1170,"y":40,"wires":[["ca61e8c8.ebe488"]]},{"id":"742863d2.05d68c","type":"template","z":"2c6a590c.6fc7f6","name":"Foot","field":"payload.foot","fieldType":"msg","format":"html","syntax":"mustache","template":"    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"loginDialog\" title=\"Login\" class='card'>\n        <div class='card-body'>\n            <table>\n                <tr>\n                    <td width=\"50%\" align=\"left\"><span class=\"tableText\">Password</span></td>\n                    <td width=\"50%\" align=\"right\"><input class=\"form-control tableText\" id=\"loginPassword\" type=\"password\" value=\"\" /></td>\n                </tr>\n           </table>\n        </div>\n    </div>    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>","output":"str","x":710,"y":40,"wires":[["1ee21186.2a8cae"]]},{"id":"da12ff0a.b66c4","type":"template","z":"2c6a590c.6fc7f6","name":"Head","field":"payload.head","fieldType":"msg","format":"html","syntax":"mustache","template":"    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <style>\n{{{payload.css}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>","output":"str","x":590,"y":40,"wires":[["742863d2.05d68c"]]},{"id":"ca61e8c8.ebe488","type":"http response","z":"2c6a590c.6fc7f6","name":"","statusCode":"","headers":{},"x":1290,"y":40,"wires":[]},{"id":"1264cc05.1d42c4","type":"template","z":"2c6a590c.6fc7f6","name":"Utility Scripts","field":"payload.utilityScripts","fieldType":"msg","format":"javascript","syntax":"mustache","template":"        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var projectName = '{{{payload.projectname}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n            };\n        }\n        function sendWebSocketMessageObject(message)\n        {\n            ws.send(JSON.stringify(message));\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            loginDialog(\"close\");\n//            userID  = getRandomInt(32768);\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n        });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        var jwtToken = '';\n        var loginCallback = null;\n        var loginCallbackInfo = null;\n        function checkLogin(callback, callbackInfo)\n        {\n            if (jwtToken.length > 0) return callback(callbackInfo);\n            loginDialog(\"open\", callback, callbackInfo);\n        }\n        function loadJwtToken(data)\n        {\n            if (data.token == null)\n            {\n                acknowledgeDialog('Error', 'Login', 'Denied');\n            }\n            else\n            {\n                jwtToken = data.token;\n                loginCallback(loginCallbackInfo);\n            }\n        }\n        function loginDialog(action, callback, callbackInfo) \n        {\n            $( \"#loginDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Login\",\n                            click: function() \n                            {\n                                ws.send(JSON.stringify(\n                                {\n                                    topic       : 'getJwtToken',\n                                    payload     : \n                                    {\n//                                        loginUser       : $('#loginUser').val(),\n                                        loginPassword   : $('#loginPassword').val()\n                                    },\n                                    'userID'    : userID,\n                                }));\n                                loginCallback = callback;\n                                loginCallbackInfo = callbackInfo;\n                                $( this ).dialog( \"close\" );\n                            },\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        }\n                    ]\n                });\n            $( \"#loginDialog\" ).dialog(action);\n        }\n        function sendSettingToMqtt(mqttMessage)\n        {\n            var socketMessage = \n            {\n                topic       : 'sendSettingToMqtt',\n                mqttMessage : mqttMessage,\n                token       : jwtToken,\n                userID      : userID\n            };\n            sendWebSocketMessageObject({topic : 'sendSettingToMqtt', mqttMessage : mqttMessage, token : jwtToken, userID : userID});\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n","output":"str","x":450,"y":40,"wires":[["da12ff0a.b66c4"]]},{"id":"53535317.58e45c","type":"function","z":"2c6a590c.6fc7f6","name":"Get project name and userID","func":"function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['projectname'] = global.get('projectName')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;","outputs":1,"noerr":0,"x":240,"y":40,"wires":[["1264cc05.1d42c4"]]},{"id":"7033a8d.6206e58","type":"function","z":"2c6a590c.6fc7f6","name":"IP filter","func":"var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        node.warn('Booger');\n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1020,"y":40,"wires":[["2b728ccc.30d9d4","277516e7.23358a"]]},{"id":"277516e7.23358a","type":"function","z":"2c6a590c.6fc7f6","name":"ClientInfo","func":"var ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nvar url = msg.req.url;\nreturn {\n    topic:'clientInfo', \n    payload:{\n        ipAddress   : ipAddress\n    },\n    extraInfo       : {url:url, userID:msg.payload.userID},\n};\n","outputs":1,"noerr":0,"x":1140,"y":100,"wires":[["25f32e3a.888ee2"]]},{"id":"25f32e3a.888ee2","type":"http request","z":"2c6a590c.6fc7f6","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"https://tools.keycdn.com/geo.json?host={{{payload.ipAddress}}}","tls":"","proxy":"","authType":"basic","x":1150,"y":140,"wires":[["f9b5e6c5.01af68"]]},{"id":"f9b5e6c5.01af68","type":"function","z":"2c6a590c.6fc7f6","name":"parseIpRequest","func":"var data = msg.payload.data.geo;\ndata['url'] = msg.extraInfo.url;\ndata['userID'] = msg.extraInfo.userID;\ndata['timeStamp'] = new Date().getTime();\nreturn {topic:'ipData', payload:data};\n","outputs":1,"noerr":0,"x":1160,"y":180,"wires":[["d4397867.09bf98"]]},{"id":"1ee21186.2a8cae","type":"template","z":"2c6a590c.6fc7f6","name":"html.websocket","field":"payload.html.websocket","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n","output":"str","x":860,"y":40,"wires":[["7033a8d.6206e58"]]},{"id":"d4397867.09bf98","type":"mongodb3 in","z":"2c6a590c.6fc7f6","service":"_ext_","configNode":"6a98847b.d35aac","name":"","collection":"accessLog","operation":"insertOne","x":1210,"y":220,"wires":[[]]},{"id":"85b1c69f.4fe278","type":"subflow:2c6a590c.6fc7f6","z":"49b38655.0b6f38","name":"","x":490,"y":80,"wires":[]},{"id":"c47e1f2c.28944","type":"subflow:639505ca.481e8c","z":"49b38655.0b6f38","name":"","x":200,"y":80,"wires":[["f06f6163.50c0a"]]},{"id":"f06f6163.50c0a","type":"subflow:5cd741ff.0cac8","z":"49b38655.0b6f38","x":350,"y":80,"wires":[["85b1c69f.4fe278"]]},{"id":"7b34668.3c90e98","type":"http in","z":"ed22476a.57d2f8","name":"/access-log","url":"/access-log","method":"get","upload":false,"swaggerDoc":"","x":130,"y":320,"wires":[["9689e414.6b3168"]]},{"id":"915c74cd.6ef3c8","type":"template","z":"ed22476a.57d2f8","name":"Body","field":"payload.body","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- Body HTML -->\n    <div id='querySetup'>\n        <div class='row'>\n            <div class='col-md-12'>\n                <table id='plotSetupTable'>\n                    <tr>\n                        <td align=\"center\">\n                            <span>Start Date</span>\n                        </td>\n                        <td align=\"center\">\n                            <span>Stop Date</span>\n                        </td>\n                        <td align=\"center\">\n                        </td>\n                    </tr>\n                    <tr>\n                        <td align=\"center\">\n                            <input class=\"form-control\" id=\"startDate\" type=\"text\"/>\n                        </td>\n                        <td align=\"center\">\n                            <input class=\"form-control\" id=\"stopDate\" type=\"text\"/>\n                        </td>\n                        <td align=\"center\">\n                            <button width=100% class=\"btn jumbotron-button\" id=\"getDataButton\" type=\"button\" onclick=\"getData()\">Get Data</button>\n                        </td>\n                    </tr>\n                </table>\n                <table width='100%' id='accessLogTable'>\n                    <thead>\n                        <tr>\n                            <th width='10%'>url</th>\n                            <th width='10%'>ip</th>\n                            <th width='7%' >country</th>\n                            <th width='6%' >region</th>\n                            <th width='7%' >city</th>\n                            <th width='20%'>rdns</th>\n                            <th width='10%'>isp</th>\n                            <th width='10%'>timezone</th>\n                            <th width='10%'>datetime</th>\n                        </tr>\n                    </thead>\n                    <tbody id=\"accessLogTableBody\"></tbody>\n                </table>\n            </div>\n       </div>\n    </div>\n","output":"str","x":430,"y":320,"wires":[["dd50337.67208d"]]},{"id":"dd50337.67208d","type":"template","z":"ed22476a.57d2f8","name":"Title","field":"payload.title","fieldType":"msg","format":"html","syntax":"mustache","template":"Access Log","output":"str","x":550,"y":320,"wires":[["d321b2d.d030e5"]]},{"id":"9689e414.6b3168","type":"template","z":"ed22476a.57d2f8","name":"JavaScript","field":"payload.javascript","fieldType":"msg","format":"javascript","syntax":"mustache","template":"        useWebSockets(true);\n        function onDocumentReady()\n        {\n            var now = new Date();\n            console.log(now.toLocaleString('en-US',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', ''));\n            var then = new Date(now.getTime() - 3600 * 24 * 1000);\n            $( \"#startDate\" ).val(then.toLocaleString('en-US',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', ''));\n            $( \"#stopDate\" ).val(now.toLocaleString('en-US',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', ''));\n            $( function()\n            {\n                $('#startDate').datetimepicker();\n            } );\n            $( function()\n            {\n                $('#stopDate').datetimepicker();\n            } );\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            if (msg.userID == userID)\n            {\n                switch(msg.topic)\n                {\n                    case 'getAccessLog':\n                        displayData(msg);\n                        break;\n                    default:\n                    // code block\n                }\n            }\n        }\n        function getData()\n        {\n            var startDate = new Date($( \"#startDate\" ).val()).getTime();\n            var stopDate = new Date($( \"#stopDate\" ).val()).getTime();\n            $(\"#accessLogTableBody\").remove();\n            sendWebSocketMessageObject(\n                {\n                    topic       : 'getAccessLog',\n                    userID      : userID,\n                    startDate   : startDate,\n                    stopDate    : stopDate,\n                });\n            \n        }\n        function displayData(msg)\n        {\n            var markup = '<tbody id=\"accessLogTableBody\">';\n            for (var ii = 0; ii < msg.payload.length; ++ii)\n            {\n                markup = markup + addRow(msg.payload[ii]);\n            }\n            markup = markup + '</tbody>';\n            $(\"#accessLogTable\").append(markup);\n        }\n\n        function addRow(record)\n        {\n            var markup = '<tr>';\n            markup = markup + '<td>' + record.url + '</td>';\n            markup = markup + '<td>' + record.ip + '</td>';\n            markup = markup + '<td>' + record.country + '</td>';\n            markup = markup + '<td>' + record.region + '</td>';\n            markup = markup + '<td>' + record.city + '</td>';\n            markup = markup + '<td>' + record.rdns + '</td>';\n            markup = markup + '<td>' + record.isp + '</td>';\n            markup = markup + '<td>' + record.timezone + '</td>';\n            markup = markup + '<td>' + record.datetime + '</td>';\n            markup = markup + '</tr>';\n            return markup;\n            \n        }\n","output":"str","x":290,"y":320,"wires":[["915c74cd.6ef3c8"]]},{"id":"d321b2d.d030e5","type":"subflow:49b38655.0b6f38","z":"ed22476a.57d2f8","name":"","x":690,"y":320,"wires":[]},{"id":"8596a43c.d49708","type":"websocket in","z":"ed22476a.57d2f8","name":"/access-log/websocket","server":"5e063c54.f89de4","client":"","x":160,"y":400,"wires":[["a6e2105c.e6f46"]]},{"id":"a6e2105c.e6f46","type":"json","z":"ed22476a.57d2f8","name":"","property":"payload","action":"","pretty":false,"x":330,"y":400,"wires":[["4a12a6d3.81f398"]]},{"id":"4a12a6d3.81f398","type":"function","z":"ed22476a.57d2f8","name":"Setup AccessLog Query","func":"var projectionFilter =  \n{\n    projection:\n    {\n        _id : 0, \n    } \n};\nvar queryFilter = \n{\n    timeStamp :\n    {\n        $gte: msg.payload.startDate,\n        $lte: msg.payload.stopDate\n    }\n}\nvar newMsg = \n{\n    topic           : 'getAccessLog',\n    userID          : msg.payload.userID,\n    payload         : [queryFilter, projectionFilter],\n};\nreturn newMsg;\n","outputs":1,"noerr":0,"x":510,"y":400,"wires":[["685e4509.f4ad8c"]]},{"id":"685e4509.f4ad8c","type":"mongodb3 in","z":"ed22476a.57d2f8","service":"_ext_","configNode":"6a98847b.d35aac","name":"","collection":"accessLog","operation":"find.toArray","x":780,"y":400,"wires":[["98dfc575.8d8f58"]]},{"id":"98dfc575.8d8f58","type":"function","z":"ed22476a.57d2f8","name":"Sort Archive Data","func":"function objectLength( object ) {\n    var length = 0;\n    for( var key in object ) {\n        if( object.hasOwnProperty(key) ) {\n            ++length;\n        }\n    }\n    return length;\n}\n// reverse sort big to small\nfunction sortByKey(arr, key) \n{\n    return arr.sort( function(a, b) \n        {\n            var x = a[key]; \n            var y = b[key];\n            return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n        } );\n}\n\nvar numRecords = objectLength(msg.payload);\nif (numRecords < 1)\n{\n    return {\n        topic : msg.device.name,\n        payload:{\n            topic           : 'getAccessLog',\n            payload         : null,\n            userID          : msg.userID,\n        }\n    };\n}\nvar records = [];\nfor (var ii = 0; ii < numRecords; ++ii) records[ii] = msg.payload[ii]; \nsortByKey(records, 'timeStamp');\n\nreturn {\n    payload:{\n        topic           : 'getAccessLog',\n        payload         : records,\n        userID          : msg.userID,\n    }\n};\n","outputs":1,"noerr":0,"x":1030,"y":400,"wires":[["c3083467.5090b8"]]},{"id":"c3083467.5090b8","type":"websocket out","z":"ed22476a.57d2f8","name":"/access-log/websocket","server":"5e063c54.f89de4","client":"","x":1240,"y":400,"wires":[]}]